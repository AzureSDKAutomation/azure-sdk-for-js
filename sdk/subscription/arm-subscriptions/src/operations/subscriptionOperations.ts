/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/subscriptionOperationsMappers";
import * as Parameters from "../models/parameters";
import { SubscriptionClientContext } from "../subscriptionClientContext";

/** Class representing a SubscriptionOperations. */
export class SubscriptionOperations {
  private readonly client: SubscriptionClientContext;

  /**
   * Create a SubscriptionOperations.
   * @param {SubscriptionClientContext} client Reference to the service client.
   */
  constructor(client: SubscriptionClientContext) {
    this.client = client;
  }

  /**
   * Create Alias Subscription.
   * @param aliasName Alias Name
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionCreateAliasResponse>
   */
  createAlias(aliasName: string, body: Models.PutAliasRequest, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionCreateAliasResponse> {
    return this.beginCreateAlias(aliasName,body,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SubscriptionCreateAliasResponse>;
  }

  /**
   * Redeem subscription.
   * @param subscriptionId Subscription Id.
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionRedeemResponse>
   */
  redeem(subscriptionId: string, body: Models.RedeemSubscriptionRequest, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionRedeemResponse> {
    return this.beginRedeem(subscriptionId,body,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SubscriptionRedeemResponse>;
  }

  /**
   * Create Alias Subscription.
   * @param aliasName Alias Name
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateAlias(aliasName: string, body: Models.PutAliasRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        aliasName,
        body,
        options
      },
      beginCreateAliasOperationSpec,
      options);
  }

  /**
   * Redeem subscription.
   * @param subscriptionId Subscription Id.
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRedeem(subscriptionId: string, body: Models.RedeemSubscriptionRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        subscriptionId,
        body,
        options
      },
      beginRedeemOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const beginCreateAliasOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "providers/Microsoft.Subscription/aliases/{aliasName}",
  urlParameters: [
    Parameters.aliasName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.PutAliasRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PutAliasResponse
    },
    201: {
      bodyMapper: Mappers.PutAliasResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponseBody
    }
  },
  serializer
};

const beginRedeemOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Subscription/subscriptions/{subscriptionId}/redeem",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.RedeemSubscriptionRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PutAliasResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponseBody
    }
  },
  serializer
};
