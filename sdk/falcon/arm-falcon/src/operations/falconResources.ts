/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/falconResourcesMappers";
import * as Parameters from "../models/parameters";
import { FalconClientContext } from "../falconClientContext";

/** Class representing a FalconResources. */
export class FalconResources {
  private readonly client: FalconClientContext;

  /**
   * Create a FalconResources.
   * @param {FalconClientContext} client Reference to the service client.
   */
  constructor(client: FalconClientContext) {
    this.client = client;
  }

  /**
   * Create or update Falcon resource.
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The Falcon resource.
   * @param resourceParameters Resource details.
   * @param [options] The optional parameters
   * @returns Promise<Models.FalconResourcesCreateAndUpdateResponse>
   */
  createAndUpdate(resourceGroupName: string, resourceName: string, resourceParameters: Models.FalconResource, options?: msRest.RequestOptionsBase): Promise<Models.FalconResourcesCreateAndUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The Falcon resource.
   * @param resourceParameters Resource details.
   * @param callback The callback
   */
  createAndUpdate(resourceGroupName: string, resourceName: string, resourceParameters: Models.FalconResource, callback: msRest.ServiceCallback<Models.FalconResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The Falcon resource.
   * @param resourceParameters Resource details.
   * @param options The optional parameters
   * @param callback The callback
   */
  createAndUpdate(resourceGroupName: string, resourceName: string, resourceParameters: Models.FalconResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FalconResource>): void;
  createAndUpdate(resourceGroupName: string, resourceName: string, resourceParameters: Models.FalconResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FalconResource>, callback?: msRest.ServiceCallback<Models.FalconResource>): Promise<Models.FalconResourcesCreateAndUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        resourceParameters,
        options
      },
      createAndUpdateOperationSpec,
      callback) as Promise<Models.FalconResourcesCreateAndUpdateResponse>;
  }

  /**
   * Deletes an existing Azure Falcon resource
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The Falcon resource.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,resourceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Updates the specified resource tags.
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The Falcon resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.FalconResourcesUpdateTagsResponse>
   */
  updateTags(resourceGroupName: string, resourceName: string, options?: Models.FalconResourcesUpdateTagsOptionalParams): Promise<Models.FalconResourcesUpdateTagsResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The Falcon resource.
   * @param callback The callback
   */
  updateTags(resourceGroupName: string, resourceName: string, callback: msRest.ServiceCallback<Models.FalconResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The Falcon resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateTags(resourceGroupName: string, resourceName: string, options: Models.FalconResourcesUpdateTagsOptionalParams, callback: msRest.ServiceCallback<Models.FalconResource>): void;
  updateTags(resourceGroupName: string, resourceName: string, options?: Models.FalconResourcesUpdateTagsOptionalParams | msRest.ServiceCallback<Models.FalconResource>, callback?: msRest.ServiceCallback<Models.FalconResource>): Promise<Models.FalconResourcesUpdateTagsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      updateTagsOperationSpec,
      callback) as Promise<Models.FalconResourcesUpdateTagsResponse>;
  }

  /**
   * Lists all the Falcon resources under the given resource group.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.FalconResourcesListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.FalconResourcesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.FalconResourceListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FalconResourceListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FalconResourceListResult>, callback?: msRest.ServiceCallback<Models.FalconResourceListResult>): Promise<Models.FalconResourcesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.FalconResourcesListByResourceGroupResponse>;
  }

  /**
   * Lists all of the Falcon resources under the given subscription.
   * @param apiVersion Client Api Version.
   * @param [options] The optional parameters
   * @returns Promise<Models.FalconResourcesListBySubscriptionResponse>
   */
  listBySubscription(apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.FalconResourcesListBySubscriptionResponse>;
  /**
   * @param apiVersion Client Api Version.
   * @param callback The callback
   */
  listBySubscription(apiVersion: string, callback: msRest.ServiceCallback<Models.FalconResourceListResult>): void;
  /**
   * @param apiVersion Client Api Version.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FalconResourceListResult>): void;
  listBySubscription(apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FalconResourceListResult>, callback?: msRest.ServiceCallback<Models.FalconResourceListResult>): Promise<Models.FalconResourcesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        apiVersion,
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.FalconResourcesListBySubscriptionResponse>;
  }

  /**
   * Deletes an existing Azure Falcon resource
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The Falcon resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Lists all the Falcon resources under the given resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.FalconResourcesListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.FalconResourcesListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.FalconResourceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FalconResourceListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FalconResourceListResult>, callback?: msRest.ServiceCallback<Models.FalconResourceListResult>): Promise<Models.FalconResourcesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.FalconResourcesListByResourceGroupNextResponse>;
  }

  /**
   * Lists all of the Falcon resources under the given subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.FalconResourcesListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.FalconResourcesListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.FalconResourceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FalconResourceListResult>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FalconResourceListResult>, callback?: msRest.ServiceCallback<Models.FalconResourceListResult>): Promise<Models.FalconResourcesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.FalconResourcesListBySubscriptionNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createAndUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Falcon/resources/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "resourceParameters",
    mapper: {
      ...Mappers.FalconResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.FalconResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateTagsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Falcon/resources/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      tags: [
        "options",
        "tags"
      ]
    },
    mapper: {
      ...Mappers.TagsObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.FalconResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Falcon/resources",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FalconResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Falcon/resources",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FalconResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Falcon/resources/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FalconResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FalconResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
