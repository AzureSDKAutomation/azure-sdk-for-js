/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/managedPrivateEndpointsMappers";
import * as Parameters from "../models/parameters";
import { SynapseManagementClientContext } from "../synapseManagementClientContext";

/** Class representing a ManagedPrivateEndpoints. */
export class ManagedPrivateEndpoints {
  private readonly client: SynapseManagementClientContext;

  /**
   * Create a ManagedPrivateEndpoints.
   * @param {SynapseManagementClientContext} client Reference to the service client.
   */
  constructor(client: SynapseManagementClientContext) {
    this.client = client;
  }

  /**
   * Get Managed Private Endpoints
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param managedPrivateEndpointName Managed private endpoint name
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedPrivateEndpointsGetResponse>
   */
  get(resourceGroupName: string, workspaceName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagedPrivateEndpointsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param managedPrivateEndpointName Managed private endpoint name
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, callback: msRest.ServiceCallback<Models.ManagedPrivateEndpoint>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param managedPrivateEndpointName Managed private endpoint name
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedPrivateEndpoint>): void;
  get(resourceGroupName: string, workspaceName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedPrivateEndpoint>, callback?: msRest.ServiceCallback<Models.ManagedPrivateEndpoint>): Promise<Models.ManagedPrivateEndpointsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        managedVirtualNetworkName,
        managedPrivateEndpointName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ManagedPrivateEndpointsGetResponse>;
  }

  /**
   * Create Managed Private Endpoints
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param managedPrivateEndpointName Managed private endpoint name
   * @param managedPrivateEndpoint Managed private endpoint properties.
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedPrivateEndpointsCreateResponse>
   */
  create(resourceGroupName: string, workspaceName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, managedPrivateEndpoint: Models.ManagedPrivateEndpoint, options?: msRest.RequestOptionsBase): Promise<Models.ManagedPrivateEndpointsCreateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param managedPrivateEndpointName Managed private endpoint name
   * @param managedPrivateEndpoint Managed private endpoint properties.
   * @param callback The callback
   */
  create(resourceGroupName: string, workspaceName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, managedPrivateEndpoint: Models.ManagedPrivateEndpoint, callback: msRest.ServiceCallback<Models.ManagedPrivateEndpoint>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param managedPrivateEndpointName Managed private endpoint name
   * @param managedPrivateEndpoint Managed private endpoint properties.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, workspaceName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, managedPrivateEndpoint: Models.ManagedPrivateEndpoint, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedPrivateEndpoint>): void;
  create(resourceGroupName: string, workspaceName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, managedPrivateEndpoint: Models.ManagedPrivateEndpoint, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedPrivateEndpoint>, callback?: msRest.ServiceCallback<Models.ManagedPrivateEndpoint>): Promise<Models.ManagedPrivateEndpointsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        managedVirtualNetworkName,
        managedPrivateEndpointName,
        managedPrivateEndpoint,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.ManagedPrivateEndpointsCreateResponse>;
  }

  /**
   * Delete Managed Private Endpoints
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param managedPrivateEndpointName Managed private endpoint name
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, workspaceName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,workspaceName,managedVirtualNetworkName,managedPrivateEndpointName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * List Managed Private Endpoints
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedPrivateEndpointsListByWorkspaceResponse>
   */
  listByWorkspace(resourceGroupName: string, workspaceName: string, managedVirtualNetworkName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagedPrivateEndpointsListByWorkspaceResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param callback The callback
   */
  listByWorkspace(resourceGroupName: string, workspaceName: string, managedVirtualNetworkName: string, callback: msRest.ServiceCallback<Models.ManagedPrivateEndpointListResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param options The optional parameters
   * @param callback The callback
   */
  listByWorkspace(resourceGroupName: string, workspaceName: string, managedVirtualNetworkName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedPrivateEndpointListResponse>): void;
  listByWorkspace(resourceGroupName: string, workspaceName: string, managedVirtualNetworkName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedPrivateEndpointListResponse>, callback?: msRest.ServiceCallback<Models.ManagedPrivateEndpointListResponse>): Promise<Models.ManagedPrivateEndpointsListByWorkspaceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        managedVirtualNetworkName,
        options
      },
      listByWorkspaceOperationSpec,
      callback) as Promise<Models.ManagedPrivateEndpointsListByWorkspaceResponse>;
  }

  /**
   * Delete Managed Private Endpoints
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param managedPrivateEndpointName Managed private endpoint name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, workspaceName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        workspaceName,
        managedVirtualNetworkName,
        managedPrivateEndpointName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * List Managed Private Endpoints
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedPrivateEndpointsListByWorkspaceNextResponse>
   */
  listByWorkspaceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagedPrivateEndpointsListByWorkspaceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByWorkspaceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ManagedPrivateEndpointListResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByWorkspaceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedPrivateEndpointListResponse>): void;
  listByWorkspaceNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedPrivateEndpointListResponse>, callback?: msRest.ServiceCallback<Models.ManagedPrivateEndpointListResponse>): Promise<Models.ManagedPrivateEndpointsListByWorkspaceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByWorkspaceNextOperationSpec,
      callback) as Promise<Models.ManagedPrivateEndpointsListByWorkspaceNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.managedVirtualNetworkName,
    Parameters.managedPrivateEndpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedPrivateEndpoint
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.managedVirtualNetworkName,
    Parameters.managedPrivateEndpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "managedPrivateEndpoint",
    mapper: {
      ...Mappers.ManagedPrivateEndpoint,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ManagedPrivateEndpoint
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByWorkspaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.managedVirtualNetworkName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedPrivateEndpointListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.managedVirtualNetworkName,
    Parameters.managedPrivateEndpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByWorkspaceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedPrivateEndpointListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
