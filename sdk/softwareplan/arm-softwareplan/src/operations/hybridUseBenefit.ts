/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/hybridUseBenefitMappers";
import * as Parameters from "../models/parameters";
import { SoftwareplanClientContext } from "../softwareplanClientContext";

/** Class representing a HybridUseBenefit. */
export class HybridUseBenefit {
  private readonly client: SoftwareplanClientContext;

  /**
   * Create a HybridUseBenefit.
   * @param {SoftwareplanClientContext} client Reference to the service client.
   */
  constructor(client: SoftwareplanClientContext) {
    this.client = client;
  }

  /**
   * Get all hybrid use benefits associated with an ARM resource.
   * @param scope The scope at which the operation is performed. This is limited to
   * Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param [options] The optional parameters
   * @returns Promise<Models.HybridUseBenefitListResponse>
   */
  list(scope: string, options?: Models.HybridUseBenefitListOptionalParams): Promise<Models.HybridUseBenefitListResponse>;
  /**
   * @param scope The scope at which the operation is performed. This is limited to
   * Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param callback The callback
   */
  list(scope: string, callback: msRest.ServiceCallback<Models.HybridUseBenefitListResult>): void;
  /**
   * @param scope The scope at which the operation is performed. This is limited to
   * Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param options The optional parameters
   * @param callback The callback
   */
  list(scope: string, options: Models.HybridUseBenefitListOptionalParams, callback: msRest.ServiceCallback<Models.HybridUseBenefitListResult>): void;
  list(scope: string, options?: Models.HybridUseBenefitListOptionalParams | msRest.ServiceCallback<Models.HybridUseBenefitListResult>, callback?: msRest.ServiceCallback<Models.HybridUseBenefitListResult>): Promise<Models.HybridUseBenefitListResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.HybridUseBenefitListResponse>;
  }

  /**
   * Create a new hybrid use benefit under a given scope
   * @param scope The scope at which the operation is performed. This is limited to
   * Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param body Request body for creating a hybrid use benefit
   * @param [options] The optional parameters
   * @returns Promise<Models.HybridUseBenefitCreateResponse>
   */
  create(scope: string, planId: string, body: Models.HybridUseBenefitModel, options?: msRest.RequestOptionsBase): Promise<Models.HybridUseBenefitCreateResponse>;
  /**
   * @param scope The scope at which the operation is performed. This is limited to
   * Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param body Request body for creating a hybrid use benefit
   * @param callback The callback
   */
  create(scope: string, planId: string, body: Models.HybridUseBenefitModel, callback: msRest.ServiceCallback<Models.HybridUseBenefitModel>): void;
  /**
   * @param scope The scope at which the operation is performed. This is limited to
   * Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param body Request body for creating a hybrid use benefit
   * @param options The optional parameters
   * @param callback The callback
   */
  create(scope: string, planId: string, body: Models.HybridUseBenefitModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridUseBenefitModel>): void;
  create(scope: string, planId: string, body: Models.HybridUseBenefitModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HybridUseBenefitModel>, callback?: msRest.ServiceCallback<Models.HybridUseBenefitModel>): Promise<Models.HybridUseBenefitCreateResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        planId,
        body,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.HybridUseBenefitCreateResponse>;
  }

  /**
   * Updates an existing hybrid use benefit
   * @param scope The scope at which the operation is performed. This is limited to
   * Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param body Request body for creating a hybrid use benefit
   * @param [options] The optional parameters
   * @returns Promise<Models.HybridUseBenefitUpdateResponse>
   */
  update(scope: string, planId: string, body: Models.HybridUseBenefitModel, options?: msRest.RequestOptionsBase): Promise<Models.HybridUseBenefitUpdateResponse>;
  /**
   * @param scope The scope at which the operation is performed. This is limited to
   * Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param body Request body for creating a hybrid use benefit
   * @param callback The callback
   */
  update(scope: string, planId: string, body: Models.HybridUseBenefitModel, callback: msRest.ServiceCallback<Models.HybridUseBenefitModel>): void;
  /**
   * @param scope The scope at which the operation is performed. This is limited to
   * Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param body Request body for creating a hybrid use benefit
   * @param options The optional parameters
   * @param callback The callback
   */
  update(scope: string, planId: string, body: Models.HybridUseBenefitModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridUseBenefitModel>): void;
  update(scope: string, planId: string, body: Models.HybridUseBenefitModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HybridUseBenefitModel>, callback?: msRest.ServiceCallback<Models.HybridUseBenefitModel>): Promise<Models.HybridUseBenefitUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        planId,
        body,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.HybridUseBenefitUpdateResponse>;
  }

  /**
   * Gets a given plan ID
   * @param scope The scope at which the operation is performed. This is limited to
   * Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param [options] The optional parameters
   * @returns Promise<Models.HybridUseBenefitGetResponse>
   */
  get(scope: string, planId: string, options?: msRest.RequestOptionsBase): Promise<Models.HybridUseBenefitGetResponse>;
  /**
   * @param scope The scope at which the operation is performed. This is limited to
   * Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param callback The callback
   */
  get(scope: string, planId: string, callback: msRest.ServiceCallback<Models.HybridUseBenefitModel>): void;
  /**
   * @param scope The scope at which the operation is performed. This is limited to
   * Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(scope: string, planId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridUseBenefitModel>): void;
  get(scope: string, planId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HybridUseBenefitModel>, callback?: msRest.ServiceCallback<Models.HybridUseBenefitModel>): Promise<Models.HybridUseBenefitGetResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        planId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.HybridUseBenefitGetResponse>;
  }

  /**
   * Deletes a given plan ID
   * @param scope The scope at which the operation is performed. This is limited to
   * Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(scope: string, planId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param scope The scope at which the operation is performed. This is limited to
   * Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param callback The callback
   */
  deleteMethod(scope: string, planId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scope The scope at which the operation is performed. This is limited to
   * Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(scope: string, planId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(scope: string, planId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        planId,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Get all hybrid use benefits associated with an ARM resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HybridUseBenefitListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.HybridUseBenefitListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.HybridUseBenefitListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridUseBenefitListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HybridUseBenefitListResult>, callback?: msRest.ServiceCallback<Models.HybridUseBenefitListResult>): Promise<Models.HybridUseBenefitListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.HybridUseBenefitListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits",
  urlParameters: [
    Parameters.scope
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HybridUseBenefitListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}",
  urlParameters: [
    Parameters.scope,
    Parameters.planId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.HybridUseBenefitModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HybridUseBenefitModel
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}",
  urlParameters: [
    Parameters.scope,
    Parameters.planId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.HybridUseBenefitModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HybridUseBenefitModel
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}",
  urlParameters: [
    Parameters.scope,
    Parameters.planId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HybridUseBenefitModel
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}",
  urlParameters: [
    Parameters.scope,
    Parameters.planId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HybridUseBenefitListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
