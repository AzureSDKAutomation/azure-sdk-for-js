/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/subscriptionsMappers";
import * as Parameters from "../models/parameters";
import { StreamAnalyticsManagementClientContext } from "../streamAnalyticsManagementClientContext";

/** Class representing a Subscriptions. */
export class Subscriptions {
  private readonly client: StreamAnalyticsManagementClientContext;

  /**
   * Create a Subscriptions.
   * @param {StreamAnalyticsManagementClientContext} client Reference to the service client.
   */
  constructor(client: StreamAnalyticsManagementClientContext) {
    this.client = client;
  }

  /**
   * Retrieves the subscription's current quota information in a particular region.
   * @param location The region to which the request is sent. You can find out which regions Azure
   * Stream Analytics is supported in here: https://azure.microsoft.com/en-us/regions/
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionsListQuotasResponse>
   */
  listQuotas(location: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionsListQuotasResponse>;
  /**
   * @param location The region to which the request is sent. You can find out which regions Azure
   * Stream Analytics is supported in here: https://azure.microsoft.com/en-us/regions/
   * @param callback The callback
   */
  listQuotas(location: string, callback: msRest.ServiceCallback<Models.SubscriptionQuotasListResult>): void;
  /**
   * @param location The region to which the request is sent. You can find out which regions Azure
   * Stream Analytics is supported in here: https://azure.microsoft.com/en-us/regions/
   * @param options The optional parameters
   * @param callback The callback
   */
  listQuotas(location: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionQuotasListResult>): void;
  listQuotas(location: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SubscriptionQuotasListResult>, callback?: msRest.ServiceCallback<Models.SubscriptionQuotasListResult>): Promise<Models.SubscriptionsListQuotasResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        options
      },
      listQuotasOperationSpec,
      callback) as Promise<Models.SubscriptionsListQuotasResponse>;
  }

  /**
   * Test the Stream Analytics query on a sample input.
   * @param streamingJob A streaming job object. This object defines the input, output, and
   * transformation for the query testing.
   * @param location The region to which the request is sent. You can find out which regions Azure
   * Stream Analytics is supported in here: https://azure.microsoft.com/en-us/regions/
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  testQuery(streamingJob: Models.StreamingJob, location: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginTestQuery(streamingJob,location,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Test the Stream Analytics query on a sample input.
   * @param streamingJob A streaming job object. This object defines the input, output, and
   * transformation for the query testing.
   * @param location The region to which the request is sent. You can find out which regions Azure
   * Stream Analytics is supported in here: https://azure.microsoft.com/en-us/regions/
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginTestQuery(streamingJob: Models.StreamingJob, location: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        streamingJob,
        location,
        options
      },
      beginTestQueryOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listQuotasOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.StreamAnalytics/locations/{location}/quotas",
  urlParameters: [
    Parameters.location,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionQuotasListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginTestQueryOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.StreamAnalytics/locations/{location}/testQuery",
  urlParameters: [
    Parameters.location,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "streamingJob",
    mapper: {
      ...Mappers.StreamingJob,
      required: true
    }
  },
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
