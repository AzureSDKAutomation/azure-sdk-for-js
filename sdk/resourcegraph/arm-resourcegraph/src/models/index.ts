/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * An interval in time specifying the date and time for the inclusive start and exclusive end, i.e.
 * `[start, end)`.
 */
export interface DateTimeInterval {
  /**
   * A datetime indicating the inclusive/closed start of the time interval, i.e. `[`**`start`**`,
   * end)`. Specifying a `start` that occurs chronologically after `end` will result in an error.
   */
  start: Date;
  /**
   * A datetime indicating the exclusive/open end of the time interval, i.e. `[start,
   * `**`end`**`)`. Specifying an `end` that occurs chronologically before `start` will result in
   * an error.
   */
  end: Date;
}

/**
 * Specifies the date and time interval for a changes request.
 */
export interface ResourceChangesRequestParametersInterval extends DateTimeInterval {
}

/**
 * The parameters for a specific changes request.
 */
export interface ResourceChangesRequestParameters {
  /**
   * Specifies the list of resources for a changes request.
   */
  resourceIds?: string[];
  /**
   * The subscription id of resources to query the changes from.
   */
  subscriptionId?: string;
  /**
   * Specifies the date and time interval for a changes request.
   */
  interval: ResourceChangesRequestParametersInterval;
  /**
   * Acts as the continuation token for paged responses.
   */
  skipToken?: string;
  /**
   * The maximum number of changes the client can accept in a paged response.
   */
  top?: number;
  /**
   * The table name to query resources from.
   */
  table?: string;
  /**
   * The flag if set to true will fetch property changes
   */
  fetchPropertyChanges?: boolean;
  /**
   * The flag if set to true will fetch change snapshots
   */
  fetchSnapshots?: boolean;
}

/**
 * Data on a specific resource snapshot.
 */
export interface ResourceSnapshotData {
  /**
   * The time when the snapshot was created.
   * The snapshot timestamp provides an approximation as to when a modification to a resource was
   * detected.  There can be a difference between the actual modification time and the detection
   * time.  This is due to differences in how operations that modify a resource are processed,
   * versus how operation that record resource snapshots are processed.
   */
  timestamp: Date;
  /**
   * The resource snapshot content (in resourceChangeDetails response only).
   */
  content?: any;
}

/**
 * The snapshot before the change.
 */
export interface ResourceChangeDataBeforeSnapshot extends ResourceSnapshotData {
}

/**
 * The snapshot after the change.
 */
export interface ResourceChangeDataAfterSnapshot extends ResourceSnapshotData {
}

/**
 * The resource property change
 */
export interface ResourcePropertyChange {
  /**
   * The property name
   */
  propertyName: string;
  /**
   * The property value in before snapshot
   */
  beforeValue?: string;
  /**
   * The property value in after snapshot
   */
  afterValue?: string;
  /**
   * The change category. Possible values include: 'User', 'System'
   */
  changeCategory: ChangeCategory;
  /**
   * The property change Type. Possible values include: 'Insert', 'Update', 'Remove'
   */
  propertyChangeType: PropertyChangeType;
}

/**
 * Data on a specific change, represented by a pair of before and after resource snapshots.
 */
export interface ResourceChangeData {
  /**
   * The resource for a change.
   */
  resourceId?: string;
  /**
   * The change ID. Valid and unique within the specified resource only.
   */
  changeId: string;
  /**
   * The snapshot before the change.
   */
  beforeSnapshot: ResourceChangeDataBeforeSnapshot;
  /**
   * The snapshot after the change.
   */
  afterSnapshot: ResourceChangeDataAfterSnapshot;
  /**
   * The change type for snapshot. PropertyChanges will be provided in case of Update change type.
   * Possible values include: 'Create', 'Update', 'Delete'
   */
  changeType?: ChangeType;
  /**
   * An array of resource property change
   */
  propertyChanges?: ResourcePropertyChange[];
}

/**
 * A list of changes associated with a resource over a specific time interval.
 */
export interface ResourceChangeList {
  /**
   * The pageable value returned by the operation, i.e. a list of changes to the resource.
   *
   * - The list is ordered from the most recent changes to the least recent changes.
   * - This list will be empty if there were no changes during the requested interval.
   * - The `Before` snapshot timestamp value of the oldest change can be outside of the specified
   * time interval.
   */
  changes?: ResourceChangeData[];
  /**
   * Skip token that encodes the skip information while executing the current request
   */
  skipToken?: any;
}

/**
 * The parameters for a specific change details request.
 */
export interface ResourceChangeDetailsRequestParameters {
  /**
   * Specifies the list of resources for a change details request.
   */
  resourceIds: string[];
  /**
   * Specifies the list of change IDs for a change details request.
   */
  changeIds: string[];
}

/**
 * The resource management error additional info.
 */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The additional info.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly info?: any;
}

/**
 * The error object.
 */
export interface ErrorResponseError {
  /**
   * The error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * The error message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * The error target.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly target?: string;
  /**
   * The error details.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly details?: ErrorResponse[];
  /**
   * The error additional info.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/**
 * The resource management error response.
 */
export interface ErrorResponse {
  /**
   * The error object.
   */
  error?: ErrorResponseError;
}

/**
 * An interface representing ResourceGraphClientOptions.
 */
export interface ResourceGraphClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * Defines values for ChangeType.
 * Possible values include: 'Create', 'Update', 'Delete'
 * @readonly
 * @enum {string}
 */
export type ChangeType = 'Create' | 'Update' | 'Delete';

/**
 * Defines values for ChangeCategory.
 * Possible values include: 'User', 'System'
 * @readonly
 * @enum {string}
 */
export type ChangeCategory = 'User' | 'System';

/**
 * Defines values for PropertyChangeType.
 * Possible values include: 'Insert', 'Update', 'Remove'
 * @readonly
 * @enum {string}
 */
export type PropertyChangeType = 'Insert' | 'Update' | 'Remove';

/**
 * Contains response data for the resourceChanges operation.
 */
export type ResourceChangesResponse = ResourceChangeList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ResourceChangeList;
    };
};

/**
 * Contains response data for the resourceChangeDetails operation.
 */
export type ResourceChangeDetailsResponse = ResourceChangeData & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ResourceChangeData;
    };
};
