/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/effectiveConfigurationsMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a EffectiveConfigurations. */
export class EffectiveConfigurations {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a EffectiveConfigurations.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * List all configurations in a virtual network.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkName The name of the virtual network.
   * @param [options] The optional parameters
   * @returns Promise<Models.EffectiveConfigurationsListResponse>
   */
  list(resourceGroupName: string, virtualNetworkName: string, options?: Models.EffectiveConfigurationsListOptionalParams): Promise<Models.EffectiveConfigurationsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkName The name of the virtual network.
   * @param callback The callback
   */
  list(resourceGroupName: string, virtualNetworkName: string, callback: msRest.ServiceCallback<Models.NetworkManagerEffectiveConfigurationListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkName The name of the virtual network.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, virtualNetworkName: string, options: Models.EffectiveConfigurationsListOptionalParams, callback: msRest.ServiceCallback<Models.NetworkManagerEffectiveConfigurationListResult>): void;
  list(resourceGroupName: string, virtualNetworkName: string, options?: Models.EffectiveConfigurationsListOptionalParams | msRest.ServiceCallback<Models.NetworkManagerEffectiveConfigurationListResult>, callback?: msRest.ServiceCallback<Models.NetworkManagerEffectiveConfigurationListResult>): Promise<Models.EffectiveConfigurationsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        virtualNetworkName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.EffectiveConfigurationsListResponse>;
  }

  /**
   * List all configurations in a virtual network.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EffectiveConfigurationsListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.EffectiveConfigurationsListNextOptionalParams): Promise<Models.EffectiveConfigurationsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NetworkManagerEffectiveConfigurationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.EffectiveConfigurationsListNextOptionalParams, callback: msRest.ServiceCallback<Models.NetworkManagerEffectiveConfigurationListResult>): void;
  listNext(nextPageLink: string, options?: Models.EffectiveConfigurationsListNextOptionalParams | msRest.ServiceCallback<Models.NetworkManagerEffectiveConfigurationListResult>, callback?: msRest.ServiceCallback<Models.NetworkManagerEffectiveConfigurationListResult>): Promise<Models.EffectiveConfigurationsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.EffectiveConfigurationsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/networkManagerEffectiveConfigurations",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualNetworkName
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkManagerEffectiveConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkManagerEffectiveConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
