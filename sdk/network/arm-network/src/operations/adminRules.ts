/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/adminRulesMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a AdminRules. */
export class AdminRules {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a AdminRules.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Retrieves a network manager security configuration admin rule.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param [options] The optional parameters
   * @returns Promise<Models.AdminRulesListResponse>
   */
  list(resourceGroupName: string, networkManagerName: string, configurationName: string, options?: Models.AdminRulesListOptionalParams): Promise<Models.AdminRulesListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param callback The callback
   */
  list(resourceGroupName: string, networkManagerName: string, configurationName: string, callback: msRest.ServiceCallback<Models.AdminRuleListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, networkManagerName: string, configurationName: string, options: Models.AdminRulesListOptionalParams, callback: msRest.ServiceCallback<Models.AdminRuleListResult>): void;
  list(resourceGroupName: string, networkManagerName: string, configurationName: string, options?: Models.AdminRulesListOptionalParams | msRest.ServiceCallback<Models.AdminRuleListResult>, callback?: msRest.ServiceCallback<Models.AdminRuleListResult>): Promise<Models.AdminRulesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        configurationName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.AdminRulesListResponse>;
  }

  /**
   * Gets a network manager security configuration admin rule in a subscription.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param ruleName The name of the rule.
   * @param [options] The optional parameters
   * @returns Promise<Models.AdminRulesGetResponse>
   */
  get(resourceGroupName: string, networkManagerName: string, configurationName: string, ruleName: string, options?: msRest.RequestOptionsBase): Promise<Models.AdminRulesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param ruleName The name of the rule.
   * @param callback The callback
   */
  get(resourceGroupName: string, networkManagerName: string, configurationName: string, ruleName: string, callback: msRest.ServiceCallback<Models.AdminRule>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param ruleName The name of the rule.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, networkManagerName: string, configurationName: string, ruleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AdminRule>): void;
  get(resourceGroupName: string, networkManagerName: string, configurationName: string, ruleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AdminRule>, callback?: msRest.ServiceCallback<Models.AdminRule>): Promise<Models.AdminRulesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        configurationName,
        ruleName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.AdminRulesGetResponse>;
  }

  /**
   * Creates or updates an admin rule.
   * @param adminRule The admin rule to create or update
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param ruleName The name of the rule.
   * @param [options] The optional parameters
   * @returns Promise<Models.AdminRulesCreateOrUpdateResponse>
   */
  createOrUpdate(adminRule: Models.AdminRule, resourceGroupName: string, networkManagerName: string, configurationName: string, ruleName: string, options?: msRest.RequestOptionsBase): Promise<Models.AdminRulesCreateOrUpdateResponse>;
  /**
   * @param adminRule The admin rule to create or update
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param ruleName The name of the rule.
   * @param callback The callback
   */
  createOrUpdate(adminRule: Models.AdminRule, resourceGroupName: string, networkManagerName: string, configurationName: string, ruleName: string, callback: msRest.ServiceCallback<Models.AdminRule>): void;
  /**
   * @param adminRule The admin rule to create or update
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param ruleName The name of the rule.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(adminRule: Models.AdminRule, resourceGroupName: string, networkManagerName: string, configurationName: string, ruleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AdminRule>): void;
  createOrUpdate(adminRule: Models.AdminRule, resourceGroupName: string, networkManagerName: string, configurationName: string, ruleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AdminRule>, callback?: msRest.ServiceCallback<Models.AdminRule>): Promise<Models.AdminRulesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        adminRule,
        resourceGroupName,
        networkManagerName,
        configurationName,
        ruleName,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.AdminRulesCreateOrUpdateResponse>;
  }

  /**
   * Deletes an admin rule.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param ruleName The name of the rule.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, networkManagerName: string, configurationName: string, ruleName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param ruleName The name of the rule.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, networkManagerName: string, configurationName: string, ruleName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param ruleName The name of the rule.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, networkManagerName: string, configurationName: string, ruleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, networkManagerName: string, configurationName: string, ruleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        configurationName,
        ruleName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Retrieves a network manager security configuration admin rule.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AdminRulesListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.AdminRulesListNextOptionalParams): Promise<Models.AdminRulesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AdminRuleListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.AdminRulesListNextOptionalParams, callback: msRest.ServiceCallback<Models.AdminRuleListResult>): void;
  listNext(nextPageLink: string, options?: Models.AdminRulesListNextOptionalParams | msRest.ServiceCallback<Models.AdminRuleListResult>, callback?: msRest.ServiceCallback<Models.AdminRuleListResult>): Promise<Models.AdminRulesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.AdminRulesListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/securityConfigurations/{configurationName}/adminRules",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AdminRuleListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/securityConfigurations/{configurationName}/adminRules/{ruleName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.configurationName,
    Parameters.ruleName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AdminRule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/securityConfigurations/{configurationName}/adminRules/{ruleName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.configurationName,
    Parameters.ruleName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "adminRule",
    mapper: {
      ...Mappers.AdminRule,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AdminRule
    },
    201: {
      bodyMapper: Mappers.AdminRule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/securityConfigurations/{configurationName}/adminRules/{ruleName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.configurationName,
    Parameters.ruleName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AdminRuleListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
