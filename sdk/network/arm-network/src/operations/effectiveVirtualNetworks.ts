/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/effectiveVirtualNetworksMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a EffectiveVirtualNetworks. */
export class EffectiveVirtualNetworks {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a EffectiveVirtualNetworks.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * List effective virtual networks in a network manager.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param [options] The optional parameters
   * @returns Promise<Models.EffectiveVirtualNetworksListByNetworkManagerResponse>
   */
  listByNetworkManager(resourceGroupName: string, networkManagerName: string, options?: Models.EffectiveVirtualNetworksListByNetworkManagerOptionalParams): Promise<Models.EffectiveVirtualNetworksListByNetworkManagerResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param callback The callback
   */
  listByNetworkManager(resourceGroupName: string, networkManagerName: string, callback: msRest.ServiceCallback<Models.EffectiveVirtualNetworksListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByNetworkManager(resourceGroupName: string, networkManagerName: string, options: Models.EffectiveVirtualNetworksListByNetworkManagerOptionalParams, callback: msRest.ServiceCallback<Models.EffectiveVirtualNetworksListResult>): void;
  listByNetworkManager(resourceGroupName: string, networkManagerName: string, options?: Models.EffectiveVirtualNetworksListByNetworkManagerOptionalParams | msRest.ServiceCallback<Models.EffectiveVirtualNetworksListResult>, callback?: msRest.ServiceCallback<Models.EffectiveVirtualNetworksListResult>): Promise<Models.EffectiveVirtualNetworksListByNetworkManagerResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        options
      },
      listByNetworkManagerOperationSpec,
      callback) as Promise<Models.EffectiveVirtualNetworksListByNetworkManagerResponse>;
  }

  /**
   * Lists all effective virtual networks by specified network group.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param networkGroupName The name of the network group to get.
   * @param [options] The optional parameters
   * @returns Promise<Models.EffectiveVirtualNetworksListByNetworkGroupResponse>
   */
  listByNetworkGroup(resourceGroupName: string, networkManagerName: string, networkGroupName: string, options?: Models.EffectiveVirtualNetworksListByNetworkGroupOptionalParams): Promise<Models.EffectiveVirtualNetworksListByNetworkGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param networkGroupName The name of the network group to get.
   * @param callback The callback
   */
  listByNetworkGroup(resourceGroupName: string, networkManagerName: string, networkGroupName: string, callback: msRest.ServiceCallback<Models.EffectiveVirtualNetworksListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param networkGroupName The name of the network group to get.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByNetworkGroup(resourceGroupName: string, networkManagerName: string, networkGroupName: string, options: Models.EffectiveVirtualNetworksListByNetworkGroupOptionalParams, callback: msRest.ServiceCallback<Models.EffectiveVirtualNetworksListResult>): void;
  listByNetworkGroup(resourceGroupName: string, networkManagerName: string, networkGroupName: string, options?: Models.EffectiveVirtualNetworksListByNetworkGroupOptionalParams | msRest.ServiceCallback<Models.EffectiveVirtualNetworksListResult>, callback?: msRest.ServiceCallback<Models.EffectiveVirtualNetworksListResult>): Promise<Models.EffectiveVirtualNetworksListByNetworkGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        networkGroupName,
        options
      },
      listByNetworkGroupOperationSpec,
      callback) as Promise<Models.EffectiveVirtualNetworksListByNetworkGroupResponse>;
  }

  /**
   * List effective virtual networks in a network manager.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EffectiveVirtualNetworksListByNetworkManagerNextResponse>
   */
  listByNetworkManagerNext(nextPageLink: string, options?: Models.EffectiveVirtualNetworksListByNetworkManagerNextOptionalParams): Promise<Models.EffectiveVirtualNetworksListByNetworkManagerNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByNetworkManagerNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EffectiveVirtualNetworksListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByNetworkManagerNext(nextPageLink: string, options: Models.EffectiveVirtualNetworksListByNetworkManagerNextOptionalParams, callback: msRest.ServiceCallback<Models.EffectiveVirtualNetworksListResult>): void;
  listByNetworkManagerNext(nextPageLink: string, options?: Models.EffectiveVirtualNetworksListByNetworkManagerNextOptionalParams | msRest.ServiceCallback<Models.EffectiveVirtualNetworksListResult>, callback?: msRest.ServiceCallback<Models.EffectiveVirtualNetworksListResult>): Promise<Models.EffectiveVirtualNetworksListByNetworkManagerNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByNetworkManagerNextOperationSpec,
      callback) as Promise<Models.EffectiveVirtualNetworksListByNetworkManagerNextResponse>;
  }

  /**
   * Lists all effective virtual networks by specified network group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EffectiveVirtualNetworksListByNetworkGroupNextResponse>
   */
  listByNetworkGroupNext(nextPageLink: string, options?: Models.EffectiveVirtualNetworksListByNetworkGroupNextOptionalParams): Promise<Models.EffectiveVirtualNetworksListByNetworkGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByNetworkGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EffectiveVirtualNetworksListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByNetworkGroupNext(nextPageLink: string, options: Models.EffectiveVirtualNetworksListByNetworkGroupNextOptionalParams, callback: msRest.ServiceCallback<Models.EffectiveVirtualNetworksListResult>): void;
  listByNetworkGroupNext(nextPageLink: string, options?: Models.EffectiveVirtualNetworksListByNetworkGroupNextOptionalParams | msRest.ServiceCallback<Models.EffectiveVirtualNetworksListResult>, callback?: msRest.ServiceCallback<Models.EffectiveVirtualNetworksListResult>): Promise<Models.EffectiveVirtualNetworksListByNetworkGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByNetworkGroupNextOperationSpec,
      callback) as Promise<Models.EffectiveVirtualNetworksListByNetworkGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByNetworkManagerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/listEffectiveVirtualNetworks",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "parameters"
    ],
    mapper: Mappers.EffectiveVirtualNetworksParameter
  },
  responses: {
    200: {
      bodyMapper: Mappers.EffectiveVirtualNetworksListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByNetworkGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/networkGroups/{networkGroupName}/listEffectiveVirtualNetworks",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.networkGroupName
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EffectiveVirtualNetworksListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByNetworkManagerNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EffectiveVirtualNetworksListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByNetworkGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EffectiveVirtualNetworksListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
