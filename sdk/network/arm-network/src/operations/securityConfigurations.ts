/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/securityConfigurationsMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a SecurityConfigurations. */
export class SecurityConfigurations {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a SecurityConfigurations.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists all the network manager security configurations in a network manager, in a paginated
   * format.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param [options] The optional parameters
   * @returns Promise<Models.SecurityConfigurationsListResponse>
   */
  list(resourceGroupName: string, networkManagerName: string, options?: Models.SecurityConfigurationsListOptionalParams): Promise<Models.SecurityConfigurationsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param callback The callback
   */
  list(resourceGroupName: string, networkManagerName: string, callback: msRest.ServiceCallback<Models.SecurityConfigurationListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, networkManagerName: string, options: Models.SecurityConfigurationsListOptionalParams, callback: msRest.ServiceCallback<Models.SecurityConfigurationListResult>): void;
  list(resourceGroupName: string, networkManagerName: string, options?: Models.SecurityConfigurationsListOptionalParams | msRest.ServiceCallback<Models.SecurityConfigurationListResult>, callback?: msRest.ServiceCallback<Models.SecurityConfigurationListResult>): Promise<Models.SecurityConfigurationsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SecurityConfigurationsListResponse>;
  }

  /**
   * Imports network security rules to network manager security rules.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param parameters Import Security configuration parameter
   * @param [options] The optional parameters
   * @returns Promise<Models.SecurityConfigurationsImportMethodResponse>
   */
  importMethod(resourceGroupName: string, networkManagerName: string, configurationName: string, parameters: Models.NetworkManagerSecurityConfigurationImport, options?: msRest.RequestOptionsBase): Promise<Models.SecurityConfigurationsImportMethodResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param parameters Import Security configuration parameter
   * @param callback The callback
   */
  importMethod(resourceGroupName: string, networkManagerName: string, configurationName: string, parameters: Models.NetworkManagerSecurityConfigurationImport, callback: msRest.ServiceCallback<Models.SecurityConfigurationImportResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param parameters Import Security configuration parameter
   * @param options The optional parameters
   * @param callback The callback
   */
  importMethod(resourceGroupName: string, networkManagerName: string, configurationName: string, parameters: Models.NetworkManagerSecurityConfigurationImport, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SecurityConfigurationImportResult>): void;
  importMethod(resourceGroupName: string, networkManagerName: string, configurationName: string, parameters: Models.NetworkManagerSecurityConfigurationImport, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SecurityConfigurationImportResult>, callback?: msRest.ServiceCallback<Models.SecurityConfigurationImportResult>): Promise<Models.SecurityConfigurationsImportMethodResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        configurationName,
        parameters,
        options
      },
      importMethodOperationSpec,
      callback) as Promise<Models.SecurityConfigurationsImportMethodResponse>;
  }

  /**
   * The operation to evaluate import NSG to security configurations.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param parameters Import security configuration parameter
   * @param [options] The optional parameters
   * @returns Promise<Models.SecurityConfigurationsEvaluateImportResponse>
   */
  evaluateImport(resourceGroupName: string, networkManagerName: string, configurationName: string, parameters: Models.NetworkManagerSecurityConfigurationImport, options?: Models.SecurityConfigurationsEvaluateImportOptionalParams): Promise<Models.SecurityConfigurationsEvaluateImportResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param parameters Import security configuration parameter
   * @param callback The callback
   */
  evaluateImport(resourceGroupName: string, networkManagerName: string, configurationName: string, parameters: Models.NetworkManagerSecurityConfigurationImport, callback: msRest.ServiceCallback<Models.SecurityConfigurationRuleListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param parameters Import security configuration parameter
   * @param options The optional parameters
   * @param callback The callback
   */
  evaluateImport(resourceGroupName: string, networkManagerName: string, configurationName: string, parameters: Models.NetworkManagerSecurityConfigurationImport, options: Models.SecurityConfigurationsEvaluateImportOptionalParams, callback: msRest.ServiceCallback<Models.SecurityConfigurationRuleListResult>): void;
  evaluateImport(resourceGroupName: string, networkManagerName: string, configurationName: string, parameters: Models.NetworkManagerSecurityConfigurationImport, options?: Models.SecurityConfigurationsEvaluateImportOptionalParams | msRest.ServiceCallback<Models.SecurityConfigurationRuleListResult>, callback?: msRest.ServiceCallback<Models.SecurityConfigurationRuleListResult>): Promise<Models.SecurityConfigurationsEvaluateImportResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        configurationName,
        parameters,
        options
      },
      evaluateImportOperationSpec,
      callback) as Promise<Models.SecurityConfigurationsEvaluateImportResponse>;
  }

  /**
   * Retrieves a network manager security Configuration.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param [options] The optional parameters
   * @returns Promise<Models.SecurityConfigurationsGetResponse>
   */
  get(resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase): Promise<Models.SecurityConfigurationsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param callback The callback
   */
  get(resourceGroupName: string, networkManagerName: string, configurationName: string, callback: msRest.ServiceCallback<Models.SecurityConfiguration>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, networkManagerName: string, configurationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SecurityConfiguration>): void;
  get(resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SecurityConfiguration>, callback?: msRest.ServiceCallback<Models.SecurityConfiguration>): Promise<Models.SecurityConfigurationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        configurationName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SecurityConfigurationsGetResponse>;
  }

  /**
   * Creates or updates a network manager security Configuration.
   * @param securityConfiguration The security configuration to create or update
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param [options] The optional parameters
   * @returns Promise<Models.SecurityConfigurationsCreateOrUpdateResponse>
   */
  createOrUpdate(securityConfiguration: Models.SecurityConfiguration, resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase): Promise<Models.SecurityConfigurationsCreateOrUpdateResponse>;
  /**
   * @param securityConfiguration The security configuration to create or update
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param callback The callback
   */
  createOrUpdate(securityConfiguration: Models.SecurityConfiguration, resourceGroupName: string, networkManagerName: string, configurationName: string, callback: msRest.ServiceCallback<Models.SecurityConfiguration>): void;
  /**
   * @param securityConfiguration The security configuration to create or update
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(securityConfiguration: Models.SecurityConfiguration, resourceGroupName: string, networkManagerName: string, configurationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SecurityConfiguration>): void;
  createOrUpdate(securityConfiguration: Models.SecurityConfiguration, resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SecurityConfiguration>, callback?: msRest.ServiceCallback<Models.SecurityConfiguration>): Promise<Models.SecurityConfigurationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        securityConfiguration,
        resourceGroupName,
        networkManagerName,
        configurationName,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.SecurityConfigurationsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a network manager security Configuration.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, networkManagerName: string, configurationName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager security Configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, networkManagerName: string, configurationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        configurationName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Lists all the network manager security configurations in a network manager, in a paginated
   * format.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SecurityConfigurationsListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.SecurityConfigurationsListNextOptionalParams): Promise<Models.SecurityConfigurationsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SecurityConfigurationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.SecurityConfigurationsListNextOptionalParams, callback: msRest.ServiceCallback<Models.SecurityConfigurationListResult>): void;
  listNext(nextPageLink: string, options?: Models.SecurityConfigurationsListNextOptionalParams | msRest.ServiceCallback<Models.SecurityConfigurationListResult>, callback?: msRest.ServiceCallback<Models.SecurityConfigurationListResult>): Promise<Models.SecurityConfigurationsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.SecurityConfigurationsListNextResponse>;
  }

  /**
   * The operation to evaluate import NSG to security configurations.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SecurityConfigurationsEvaluateImportNextResponse>
   */
  evaluateImportNext(nextPageLink: string, options?: Models.SecurityConfigurationsEvaluateImportNextOptionalParams): Promise<Models.SecurityConfigurationsEvaluateImportNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  evaluateImportNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SecurityConfigurationRuleListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  evaluateImportNext(nextPageLink: string, options: Models.SecurityConfigurationsEvaluateImportNextOptionalParams, callback: msRest.ServiceCallback<Models.SecurityConfigurationRuleListResult>): void;
  evaluateImportNext(nextPageLink: string, options?: Models.SecurityConfigurationsEvaluateImportNextOptionalParams | msRest.ServiceCallback<Models.SecurityConfigurationRuleListResult>, callback?: msRest.ServiceCallback<Models.SecurityConfigurationRuleListResult>): Promise<Models.SecurityConfigurationsEvaluateImportNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      evaluateImportNextOperationSpec,
      callback) as Promise<Models.SecurityConfigurationsEvaluateImportNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/securityConfigurations",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SecurityConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const importMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/securityConfigurations/{configurationName}/import",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NetworkManagerSecurityConfigurationImport,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SecurityConfigurationImportResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const evaluateImportOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/securityConfigurations/{configurationName}/evaluateImport",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NetworkManagerSecurityConfigurationImport,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SecurityConfigurationRuleListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/securityConfigurations/{configurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SecurityConfiguration
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/securityConfigurations/{configurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "securityConfiguration",
    mapper: {
      ...Mappers.SecurityConfiguration,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SecurityConfiguration
    },
    201: {
      bodyMapper: Mappers.SecurityConfiguration
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/securityConfigurations/{configurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SecurityConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const evaluateImportNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SecurityConfigurationRuleListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
