/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/connectivityConfigurationsMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a ConnectivityConfigurations. */
export class ConnectivityConfigurations {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a ConnectivityConfigurations.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets a Network Connectivity Configuration, specified by the resource group, network manager
   * name, and connectivity Configuration name
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager connectivity configuration.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectivityConfigurationsGetResponse>
   */
  get(resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectivityConfigurationsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager connectivity configuration.
   * @param callback The callback
   */
  get(resourceGroupName: string, networkManagerName: string, configurationName: string, callback: msRest.ServiceCallback<Models.ConnectivityConfiguration>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager connectivity configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, networkManagerName: string, configurationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectivityConfiguration>): void;
  get(resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectivityConfiguration>, callback?: msRest.ServiceCallback<Models.ConnectivityConfiguration>): Promise<Models.ConnectivityConfigurationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        configurationName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ConnectivityConfigurationsGetResponse>;
  }

  /**
   * Creates/Updates a new network manager connectivity configuration
   * @param connectivityConfiguration Parameters supplied to create/update a network manager
   * connectivity configuration
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager connectivity configuration.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectivityConfigurationsCreateOrUpdateResponse>
   */
  createOrUpdate(connectivityConfiguration: Models.ConnectivityConfiguration, resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectivityConfigurationsCreateOrUpdateResponse>;
  /**
   * @param connectivityConfiguration Parameters supplied to create/update a network manager
   * connectivity configuration
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager connectivity configuration.
   * @param callback The callback
   */
  createOrUpdate(connectivityConfiguration: Models.ConnectivityConfiguration, resourceGroupName: string, networkManagerName: string, configurationName: string, callback: msRest.ServiceCallback<Models.ConnectivityConfiguration>): void;
  /**
   * @param connectivityConfiguration Parameters supplied to create/update a network manager
   * connectivity configuration
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager connectivity configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(connectivityConfiguration: Models.ConnectivityConfiguration, resourceGroupName: string, networkManagerName: string, configurationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectivityConfiguration>): void;
  createOrUpdate(connectivityConfiguration: Models.ConnectivityConfiguration, resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectivityConfiguration>, callback?: msRest.ServiceCallback<Models.ConnectivityConfiguration>): Promise<Models.ConnectivityConfigurationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        connectivityConfiguration,
        resourceGroupName,
        networkManagerName,
        configurationName,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.ConnectivityConfigurationsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a network manager connectivity configuration, specified by the resource group, network
   * manager name, and connectivity configuration name
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager connectivity configuration.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager connectivity configuration.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, networkManagerName: string, configurationName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager connectivity configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, networkManagerName: string, configurationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        configurationName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Lists all the network manager connectivity configuration in a specified network manager.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectivityConfigurationsListResponse>
   */
  list(resourceGroupName: string, networkManagerName: string, options?: Models.ConnectivityConfigurationsListOptionalParams): Promise<Models.ConnectivityConfigurationsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param callback The callback
   */
  list(resourceGroupName: string, networkManagerName: string, callback: msRest.ServiceCallback<Models.ConnectivityConfigurationListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, networkManagerName: string, options: Models.ConnectivityConfigurationsListOptionalParams, callback: msRest.ServiceCallback<Models.ConnectivityConfigurationListResult>): void;
  list(resourceGroupName: string, networkManagerName: string, options?: Models.ConnectivityConfigurationsListOptionalParams | msRest.ServiceCallback<Models.ConnectivityConfigurationListResult>, callback?: msRest.ServiceCallback<Models.ConnectivityConfigurationListResult>): Promise<Models.ConnectivityConfigurationsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ConnectivityConfigurationsListResponse>;
  }

  /**
   * Lists all the network manager connectivity configuration in a specified network manager.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectivityConfigurationsListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.ConnectivityConfigurationsListNextOptionalParams): Promise<Models.ConnectivityConfigurationsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ConnectivityConfigurationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.ConnectivityConfigurationsListNextOptionalParams, callback: msRest.ServiceCallback<Models.ConnectivityConfigurationListResult>): void;
  listNext(nextPageLink: string, options?: Models.ConnectivityConfigurationsListNextOptionalParams | msRest.ServiceCallback<Models.ConnectivityConfigurationListResult>, callback?: msRest.ServiceCallback<Models.ConnectivityConfigurationListResult>): Promise<Models.ConnectivityConfigurationsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.ConnectivityConfigurationsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/connectivityConfigurations/{configurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectivityConfiguration
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/connectivityConfigurations/{configurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectivityConfiguration",
    mapper: {
      ...Mappers.ConnectivityConfiguration,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ConnectivityConfiguration
    },
    201: {
      bodyMapper: Mappers.ConnectivityConfiguration
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/connectivityConfigurations/{configurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/connectivityConfigurations",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectivityConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectivityConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
