/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/translationMappers";
import * as Parameters from "../models/parameters";
import { BatchDocumentTranslationClientContext } from "../batchDocumentTranslationClientContext";

/** Class representing a Translation. */
export class Translation {
  private readonly client: BatchDocumentTranslationClientContext;

  /**
   * Create a Translation.
   * @param {BatchDocumentTranslationClientContext} client Reference to the service client.
   */
  constructor(client: BatchDocumentTranslationClientContext) {
    this.client = client;
  }

  /**
   * Submit a batch request to the document translation service.
   *
   * Each request can consists of multiple inputs.
   * Each input will contains both a source and destination container for source and target language
   * pair.
   *
   * The prefix and suffix filter (if supplied) will be used to filter the folders.
   * The prefix will be applied to the subpath after the container name
   *
   * Glossaries / Translation memory can be supplied and will be applied when the document is being
   * translated.
   * If the glossary is invalid or unreachable during translation time.  An error will be indicated
   * in the document status.
   *
   * If the file with the same name already exists in the destination, it will be overwritten.
   * TargetUrl for each target language needs to be unique.
   * @summary Submit a batch document translation request to the translation service
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param [options] The optional parameters
   * @returns Promise<Models.TranslationSubmitBatchRequestResponse>
   */
  submitBatchRequest(endpoint: string, options?: Models.TranslationSubmitBatchRequestOptionalParams): Promise<Models.TranslationSubmitBatchRequestResponse>;
  /**
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param callback The callback
   */
  submitBatchRequest(endpoint: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param options The optional parameters
   * @param callback The callback
   */
  submitBatchRequest(endpoint: string, options: Models.TranslationSubmitBatchRequestOptionalParams, callback: msRest.ServiceCallback<void>): void;
  submitBatchRequest(endpoint: string, options?: Models.TranslationSubmitBatchRequestOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.TranslationSubmitBatchRequestResponse> {
    return this.client.sendOperationRequest(
      {
        endpoint,
        options
      },
      submitBatchRequestOperationSpec,
      callback) as Promise<Models.TranslationSubmitBatchRequestResponse>;
  }

  /**
   * Returns the list of status of the translation batch operation.
   * The list will consist only of the batch request submitted by the user (based on their
   * subscription)
   *
   * The operation status are sorted by the operation Id
   *
   * If the number of operations exceed our paging limit, server side paging will be used.
   * Paginated responses will indicate a partial result by including a continuation token in the
   * response. The absence of a continuation token means that no additional pages are available.
   *
   * Clients MAY use $top and $skip query parameters to specify a number of results to return and an
   * offset into the collection.
   * The server will honor the values specified by the client; however, clients MUST be prepared to
   * handle responses that contain a different page size or contain a continuation token.
   * When both $top and $skip are given by a client, the server SHOULD first apply $skip and then
   * $top on the collection.
   * Note: If the server can't honor $top and/or $skip, the server MUST return an error to the client
   * informing about it instead of just ignoring the query options. This will avoid the risk of the
   * client making assumptions about the data returned.
   * @summary Returns the list of operations submitted and their summary status
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param [options] The optional parameters
   * @returns Promise<Models.TranslationGetOperationsResponse>
   */
  getOperations(endpoint: string, options?: Models.TranslationGetOperationsOptionalParams): Promise<Models.TranslationGetOperationsResponse>;
  /**
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param callback The callback
   */
  getOperations(endpoint: string, callback: msRest.ServiceCallback<Models.BatchStatusResponse>): void;
  /**
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param options The optional parameters
   * @param callback The callback
   */
  getOperations(endpoint: string, options: Models.TranslationGetOperationsOptionalParams, callback: msRest.ServiceCallback<Models.BatchStatusResponse>): void;
  getOperations(endpoint: string, options?: Models.TranslationGetOperationsOptionalParams | msRest.ServiceCallback<Models.BatchStatusResponse>, callback?: msRest.ServiceCallback<Models.BatchStatusResponse>): Promise<Models.TranslationGetOperationsResponse> {
    return this.client.sendOperationRequest(
      {
        endpoint,
        options
      },
      getOperationsOperationSpec,
      callback) as Promise<Models.TranslationGetOperationsResponse>;
  }

  /**
   * Returns the status of the translation of the document.
   * @summary Returns the status of the specific document
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param id Format - uuid.  The batch id
   * @param documentId Format - uuid.  The document id
   * @param [options] The optional parameters
   * @returns Promise<Models.TranslationGetDocumentStatusResponse>
   */
  getDocumentStatus(endpoint: string, id: string, documentId: string, options?: msRest.RequestOptionsBase): Promise<Models.TranslationGetDocumentStatusResponse>;
  /**
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param id Format - uuid.  The batch id
   * @param documentId Format - uuid.  The document id
   * @param callback The callback
   */
  getDocumentStatus(endpoint: string, id: string, documentId: string, callback: msRest.ServiceCallback<Models.DocumentStatusDetail>): void;
  /**
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param id Format - uuid.  The batch id
   * @param documentId Format - uuid.  The document id
   * @param options The optional parameters
   * @param callback The callback
   */
  getDocumentStatus(endpoint: string, id: string, documentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DocumentStatusDetail>): void;
  getDocumentStatus(endpoint: string, id: string, documentId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DocumentStatusDetail>, callback?: msRest.ServiceCallback<Models.DocumentStatusDetail>): Promise<Models.TranslationGetDocumentStatusResponse> {
    return this.client.sendOperationRequest(
      {
        endpoint,
        id,
        documentId,
        options
      },
      getDocumentStatusOperationSpec,
      callback) as Promise<Models.TranslationGetDocumentStatusResponse>;
  }

  /**
   * Returns the status of the translation batch operation.
   * The status will include the overall job status as well as a summary of the current progress of
   * all the documents being translated.
   * @summary Returns the status of the batch translation operation
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param id Format - uuid.  The operation id
   * @param [options] The optional parameters
   * @returns Promise<Models.TranslationGetOperationStatusResponse>
   */
  getOperationStatus(endpoint: string, id: string, options?: msRest.RequestOptionsBase): Promise<Models.TranslationGetOperationStatusResponse>;
  /**
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param id Format - uuid.  The operation id
   * @param callback The callback
   */
  getOperationStatus(endpoint: string, id: string, callback: msRest.ServiceCallback<Models.BatchStatusDetail>): void;
  /**
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param id Format - uuid.  The operation id
   * @param options The optional parameters
   * @param callback The callback
   */
  getOperationStatus(endpoint: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BatchStatusDetail>): void;
  getOperationStatus(endpoint: string, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BatchStatusDetail>, callback?: msRest.ServiceCallback<Models.BatchStatusDetail>): Promise<Models.TranslationGetOperationStatusResponse> {
    return this.client.sendOperationRequest(
      {
        endpoint,
        id,
        options
      },
      getOperationStatusOperationSpec,
      callback) as Promise<Models.TranslationGetOperationStatusResponse>;
  }

  /**
   * Cancel a currently processing or queued operation.
   * An operation will not be cancelled if it is already completed or failed or cancelling.  A bad
   * request will be returned.
   * All documents that have completed translation will not be cancelled and will be charged.
   * All pending documents will be cancelled if possible.
   * @summary Cancel a currently processing or queued operation.
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param id Format - uuid.  The operation-id
   * @param [options] The optional parameters
   * @returns Promise<Models.TranslationCancelOperationResponse>
   */
  cancelOperation(endpoint: string, id: string, options?: msRest.RequestOptionsBase): Promise<Models.TranslationCancelOperationResponse>;
  /**
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param id Format - uuid.  The operation-id
   * @param callback The callback
   */
  cancelOperation(endpoint: string, id: string, callback: msRest.ServiceCallback<Models.BatchStatusDetail>): void;
  /**
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param id Format - uuid.  The operation-id
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelOperation(endpoint: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BatchStatusDetail>): void;
  cancelOperation(endpoint: string, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BatchStatusDetail>, callback?: msRest.ServiceCallback<Models.BatchStatusDetail>): Promise<Models.TranslationCancelOperationResponse> {
    return this.client.sendOperationRequest(
      {
        endpoint,
        id,
        options
      },
      cancelOperationOperationSpec,
      callback) as Promise<Models.TranslationCancelOperationResponse>;
  }

  /**
   * Returns the status of the list of documents translation operation by a given operation id.
   *
   * The documents are sorted by the document Id
   *
   * If the number of documents exceed our paging limit, server side paging will be used.
   * Paginated responses will indicate a partial result by including a continuation token in the
   * response. The absence of a continuation token means that no additional pages are available.
   *
   * Clients MAY use $top and $skip query parameters to specify a number of results to return and an
   * offset into the collection.
   * The server will honor the values specified by the client; however, clients MUST be prepared to
   * handle responses that contain a different page size or contain a continuation token.
   * When both $top and $skip are given by a client, the server SHOULD first apply $skip and then
   * $top on the collection.
   * Note: If the server can't honor $top and/or $skip, the server MUST return an error to the client
   * informing about it instead of just ignoring the query options. This will avoid the risk of the
   * client making assumptions about the data returned.
   * @summary Returns the status of the documents of a translation batch operation
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param id Format - uuid.  The operation id
   * @param [options] The optional parameters
   * @returns Promise<Models.TranslationGetOperationDocumentsStatusResponse>
   */
  getOperationDocumentsStatus(endpoint: string, id: string, options?: Models.TranslationGetOperationDocumentsStatusOptionalParams): Promise<Models.TranslationGetOperationDocumentsStatusResponse>;
  /**
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param id Format - uuid.  The operation id
   * @param callback The callback
   */
  getOperationDocumentsStatus(endpoint: string, id: string, callback: msRest.ServiceCallback<Models.DocumentStatusResponse>): void;
  /**
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param id Format - uuid.  The operation id
   * @param options The optional parameters
   * @param callback The callback
   */
  getOperationDocumentsStatus(endpoint: string, id: string, options: Models.TranslationGetOperationDocumentsStatusOptionalParams, callback: msRest.ServiceCallback<Models.DocumentStatusResponse>): void;
  getOperationDocumentsStatus(endpoint: string, id: string, options?: Models.TranslationGetOperationDocumentsStatusOptionalParams | msRest.ServiceCallback<Models.DocumentStatusResponse>, callback?: msRest.ServiceCallback<Models.DocumentStatusResponse>): Promise<Models.TranslationGetOperationDocumentsStatusResponse> {
    return this.client.sendOperationRequest(
      {
        endpoint,
        id,
        options
      },
      getOperationDocumentsStatusOperationSpec,
      callback) as Promise<Models.TranslationGetOperationDocumentsStatusResponse>;
  }

  /**
   * The list of supported document formats supported by our service.
   * The list will include the common file extension used and supported as well as the content-type
   * if using the upload API.
   * @summary Returns the list of supported document formats
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param [options] The optional parameters
   * @returns Promise<Models.TranslationGetDocumentFormatsResponse>
   */
  getDocumentFormats(endpoint: string, options?: msRest.RequestOptionsBase): Promise<Models.TranslationGetDocumentFormatsResponse>;
  /**
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param callback The callback
   */
  getDocumentFormats(endpoint: string, callback: msRest.ServiceCallback<Models.FileFormatListResult>): void;
  /**
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param options The optional parameters
   * @param callback The callback
   */
  getDocumentFormats(endpoint: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FileFormatListResult>): void;
  getDocumentFormats(endpoint: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FileFormatListResult>, callback?: msRest.ServiceCallback<Models.FileFormatListResult>): Promise<Models.TranslationGetDocumentFormatsResponse> {
    return this.client.sendOperationRequest(
      {
        endpoint,
        options
      },
      getDocumentFormatsOperationSpec,
      callback) as Promise<Models.TranslationGetDocumentFormatsResponse>;
  }

  /**
   * The list of supported glossary formats supported by our service.
   * The list will include the common file extension used.
   * @summary Returns the list of supported document formats
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param [options] The optional parameters
   * @returns Promise<Models.TranslationGetGlossaryFormatsResponse>
   */
  getGlossaryFormats(endpoint: string, options?: msRest.RequestOptionsBase): Promise<Models.TranslationGetGlossaryFormatsResponse>;
  /**
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param callback The callback
   */
  getGlossaryFormats(endpoint: string, callback: msRest.ServiceCallback<Models.FileFormatListResult>): void;
  /**
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param options The optional parameters
   * @param callback The callback
   */
  getGlossaryFormats(endpoint: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FileFormatListResult>): void;
  getGlossaryFormats(endpoint: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FileFormatListResult>, callback?: msRest.ServiceCallback<Models.FileFormatListResult>): Promise<Models.TranslationGetGlossaryFormatsResponse> {
    return this.client.sendOperationRequest(
      {
        endpoint,
        options
      },
      getGlossaryFormatsOperationSpec,
      callback) as Promise<Models.TranslationGetGlossaryFormatsResponse>;
  }

  /**
   * The list of storage sources supported by our service.
   * @summary Returns the list of supported storage sources
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param [options] The optional parameters
   * @returns Promise<Models.TranslationGetDocumentStorageSourceResponse>
   */
  getDocumentStorageSource(endpoint: string, options?: msRest.RequestOptionsBase): Promise<Models.TranslationGetDocumentStorageSourceResponse>;
  /**
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param callback The callback
   */
  getDocumentStorageSource(endpoint: string, callback: msRest.ServiceCallback<Models.StorageSourceListResult>): void;
  /**
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus.api.cognitive.microsoft.com).
   * @param options The optional parameters
   * @param callback The callback
   */
  getDocumentStorageSource(endpoint: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StorageSourceListResult>): void;
  getDocumentStorageSource(endpoint: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StorageSourceListResult>, callback?: msRest.ServiceCallback<Models.StorageSourceListResult>): Promise<Models.TranslationGetDocumentStorageSourceResponse> {
    return this.client.sendOperationRequest(
      {
        endpoint,
        options
      },
      getDocumentStorageSourceOperationSpec,
      callback) as Promise<Models.TranslationGetDocumentStorageSourceResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const submitBatchRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0-preview.1/batches",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.BatchSubmissionRequest
  },
  responses: {
    202: {
      headersMapper: Mappers.TranslationSubmitBatchRequestHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationSubmitBatchRequestHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationSubmitBatchRequestHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationSubmitBatchRequestHeaders
    },
    500: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationSubmitBatchRequestHeaders
    },
    503: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationSubmitBatchRequestHeaders
    },
    default: {}
  },
  serializer
};

const getOperationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0-preview.1/batches",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BatchStatusResponse,
      headersMapper: Mappers.TranslationGetOperationsHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetOperationsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetOperationsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetOperationsHeaders
    },
    500: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetOperationsHeaders
    },
    503: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetOperationsHeaders
    },
    default: {}
  },
  serializer
};

const getDocumentStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0-preview.1/batches/{id}/documents/{documentId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.id,
    Parameters.documentId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DocumentStatusDetail,
      headersMapper: Mappers.TranslationGetDocumentStatusHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetDocumentStatusHeaders
    },
    404: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetDocumentStatusHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetDocumentStatusHeaders
    },
    500: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetDocumentStatusHeaders
    },
    503: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetDocumentStatusHeaders
    },
    default: {}
  },
  serializer
};

const getOperationStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0-preview.1/batches/{id}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BatchStatusDetail,
      headersMapper: Mappers.TranslationGetOperationStatusHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetOperationStatusHeaders
    },
    404: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetOperationStatusHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetOperationStatusHeaders
    },
    500: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetOperationStatusHeaders
    },
    503: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetOperationStatusHeaders
    },
    default: {}
  },
  serializer
};

const cancelOperationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0-preview.1/batches/{id}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BatchStatusDetail
    },
    401: {
      bodyMapper: Mappers.ErrorResponseV2
    },
    404: {
      bodyMapper: Mappers.ErrorResponseV2
    },
    429: {
      bodyMapper: Mappers.ErrorResponseV2
    },
    500: {
      bodyMapper: Mappers.ErrorResponseV2
    },
    503: {
      bodyMapper: Mappers.ErrorResponseV2
    },
    default: {}
  },
  serializer
};

const getOperationDocumentsStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0-preview.1/batches/{id}/documents",
  urlParameters: [
    Parameters.endpoint,
    Parameters.id
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DocumentStatusResponse,
      headersMapper: Mappers.TranslationGetOperationDocumentsStatusHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetOperationDocumentsStatusHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetOperationDocumentsStatusHeaders
    },
    404: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetOperationDocumentsStatusHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetOperationDocumentsStatusHeaders
    },
    500: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetOperationDocumentsStatusHeaders
    },
    503: {
      bodyMapper: Mappers.ErrorResponseV2,
      headersMapper: Mappers.TranslationGetOperationDocumentsStatusHeaders
    },
    default: {}
  },
  serializer
};

const getDocumentFormatsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0-preview.1/documents/formats",
  urlParameters: [
    Parameters.endpoint
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FileFormatListResult
    },
    429: {
      bodyMapper: Mappers.ErrorResponseV2
    },
    500: {
      bodyMapper: Mappers.ErrorResponseV2
    },
    503: {
      bodyMapper: Mappers.ErrorResponseV2
    },
    default: {}
  },
  serializer
};

const getGlossaryFormatsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0-preview.1/glossaries/formats",
  urlParameters: [
    Parameters.endpoint
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FileFormatListResult
    },
    429: {
      bodyMapper: Mappers.ErrorResponseV2
    },
    500: {
      bodyMapper: Mappers.ErrorResponseV2
    },
    503: {
      bodyMapper: Mappers.ErrorResponseV2
    },
    default: {}
  },
  serializer
};

const getDocumentStorageSourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0-preview.1/storagesources",
  urlParameters: [
    Parameters.endpoint
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageSourceListResult
    },
    429: {
      bodyMapper: Mappers.ErrorResponseV2
    },
    500: {
      bodyMapper: Mappers.ErrorResponseV2
    },
    503: {
      bodyMapper: Mappers.ErrorResponseV2
    },
    default: {}
  },
  serializer
};
