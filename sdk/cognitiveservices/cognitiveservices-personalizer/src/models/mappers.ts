/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


export const ServiceConfiguration: msRest.CompositeMapper = {
  serializedName: "ServiceConfiguration",
  type: {
    name: "Composite",
    className: "ServiceConfiguration",
    modelProperties: {
      rewardWaitTime: {
        required: true,
        serializedName: "rewardWaitTime",
        type: {
          name: "TimeSpan"
        }
      },
      defaultReward: {
        required: true,
        serializedName: "defaultReward",
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: -1
        },
        type: {
          name: "Number"
        }
      },
      rewardAggregation: {
        required: true,
        serializedName: "rewardAggregation",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      explorationPercentage: {
        required: true,
        serializedName: "explorationPercentage",
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      modelExportFrequency: {
        required: true,
        serializedName: "modelExportFrequency",
        type: {
          name: "TimeSpan"
        }
      },
      logMirrorEnabled: {
        serializedName: "logMirrorEnabled",
        type: {
          name: "Boolean"
        }
      },
      logMirrorSasUri: {
        serializedName: "logMirrorSasUri",
        type: {
          name: "String"
        }
      },
      logRetentionDays: {
        required: true,
        serializedName: "logRetentionDays",
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: -1
        },
        type: {
          name: "Number"
        }
      },
      modelAutoPublish: {
        serializedName: "modelAutoPublish",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      stagedModelHistoryLength: {
        serializedName: "stagedModelHistoryLength",
        defaultValue: 10,
        type: {
          name: "Number"
        }
      },
      lastConfigurationEditDate: {
        serializedName: "lastConfigurationEditDate",
        type: {
          name: "DateTime"
        }
      },
      learningMode: {
        serializedName: "learningMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalError: msRest.CompositeMapper = {
  serializedName: "InternalError",
  type: {
    name: "Composite",
    className: "InternalError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InternalError"
        }
      }
    }
  }
};

export const PersonalizerError: msRest.CompositeMapper = {
  serializedName: "PersonalizerError",
  type: {
    name: "Composite",
    className: "PersonalizerError",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        required: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PersonalizerError"
            }
          }
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "InternalError"
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        required: true,
        serializedName: "error",
        type: {
          name: "Composite",
          className: "PersonalizerError"
        }
      }
    }
  }
};

export const PolicyContract: msRest.CompositeMapper = {
  serializedName: "PolicyContract",
  type: {
    name: "Composite",
    className: "PolicyContract",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      argumentsProperty: {
        required: true,
        serializedName: "arguments",
        constraints: {
          MaxLength: 1024
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicyResultSummary: msRest.CompositeMapper = {
  serializedName: "PolicyResultSummary",
  type: {
    name: "Composite",
    className: "PolicyResultSummary",
    modelProperties: {
      timeStamp: {
        readOnly: true,
        serializedName: "timeStamp",
        type: {
          name: "DateTime"
        }
      },
      ipsEstimatorNumerator: {
        readOnly: true,
        serializedName: "ipsEstimatorNumerator",
        type: {
          name: "Number"
        }
      },
      ipsEstimatorDenominator: {
        readOnly: true,
        serializedName: "ipsEstimatorDenominator",
        type: {
          name: "Number"
        }
      },
      snipsEstimatorDenominator: {
        readOnly: true,
        serializedName: "snipsEstimatorDenominator",
        type: {
          name: "Number"
        }
      },
      aggregateTimeWindow: {
        readOnly: true,
        serializedName: "aggregateTimeWindow",
        type: {
          name: "TimeSpan"
        }
      },
      nonZeroProbability: {
        serializedName: "nonZeroProbability",
        type: {
          name: "Number"
        }
      },
      confidenceInterval: {
        readOnly: true,
        serializedName: "confidenceInterval",
        type: {
          name: "Number"
        }
      },
      sumOfSquares: {
        readOnly: true,
        serializedName: "sumOfSquares",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PolicyResultTotalSummary: msRest.CompositeMapper = {
  serializedName: "PolicyResult_totalSummary",
  type: {
    name: "Composite",
    className: "PolicyResultTotalSummary",
    modelProperties: {
      ...PolicyResultSummary.type.modelProperties
    }
  }
};

export const PolicyResult: msRest.CompositeMapper = {
  serializedName: "PolicyResult",
  type: {
    name: "Composite",
    className: "PolicyResult",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      argumentsProperty: {
        readOnly: true,
        serializedName: "arguments",
        type: {
          name: "String"
        }
      },
      summary: {
        readOnly: true,
        serializedName: "summary",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PolicyResultSummary"
            }
          }
        }
      },
      totalSummary: {
        readOnly: true,
        serializedName: "totalSummary",
        type: {
          name: "Composite",
          className: "PolicyResultTotalSummary"
        }
      }
    }
  }
};

export const Evaluation: msRest.CompositeMapper = {
  serializedName: "Evaluation",
  type: {
    name: "Composite",
    className: "Evaluation",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      jobId: {
        readOnly: true,
        serializedName: "jobId",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      policyResults: {
        serializedName: "policyResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PolicyResult"
            }
          }
        }
      },
      featureImportance: {
        serializedName: "featureImportance",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const EvaluationContract: msRest.CompositeMapper = {
  serializedName: "EvaluationContract",
  type: {
    name: "Composite",
    className: "EvaluationContract",
    modelProperties: {
      enableOfflineExperimentation: {
        serializedName: "enableOfflineExperimentation",
        type: {
          name: "Boolean"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        required: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      policies: {
        required: true,
        serializedName: "policies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PolicyContract"
            }
          }
        }
      }
    }
  }
};

export const RewardRequest: msRest.CompositeMapper = {
  serializedName: "RewardRequest",
  type: {
    name: "Composite",
    className: "RewardRequest",
    modelProperties: {
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DateRange: msRest.CompositeMapper = {
  serializedName: "DateRange",
  type: {
    name: "Composite",
    className: "DateRange",
    modelProperties: {
      from: {
        readOnly: true,
        serializedName: "from",
        type: {
          name: "DateTime"
        }
      },
      to: {
        readOnly: true,
        serializedName: "to",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const LogsPropertiesDateRange: msRest.CompositeMapper = {
  serializedName: "LogsProperties_dateRange",
  type: {
    name: "Composite",
    className: "LogsPropertiesDateRange",
    modelProperties: {
      ...DateRange.type.modelProperties
    }
  }
};

export const LogsProperties: msRest.CompositeMapper = {
  serializedName: "LogsProperties",
  type: {
    name: "Composite",
    className: "LogsProperties",
    modelProperties: {
      dateRange: {
        readOnly: true,
        serializedName: "dateRange",
        type: {
          name: "Composite",
          className: "LogsPropertiesDateRange"
        }
      }
    }
  }
};

export const Metric: msRest.CompositeMapper = {
  serializedName: "Metric",
  type: {
    name: "Composite",
    className: "Metric",
    modelProperties: {
      learningMode: {
        required: true,
        serializedName: "learningMode",
        type: {
          name: "String"
        }
      },
      startDate: {
        required: true,
        serializedName: "startDate",
        type: {
          name: "DateTime"
        }
      },
      endDate: {
        required: true,
        serializedName: "endDate",
        type: {
          name: "DateTime"
        }
      },
      numberOfEvents: {
        required: true,
        serializedName: "numberOfEvents",
        type: {
          name: "Number"
        }
      },
      sumOfRewards: {
        required: true,
        serializedName: "sumOfRewards",
        type: {
          name: "Number"
        }
      },
      numberOfMatchedEvents: {
        required: true,
        serializedName: "numberOfMatchedEvents",
        type: {
          name: "Number"
        }
      },
      sumOfImitatedRewards: {
        required: true,
        serializedName: "sumOfImitatedRewards",
        type: {
          name: "Number"
        }
      },
      cumulativeNumberOfEvents: {
        required: true,
        serializedName: "cumulativeNumberOfEvents",
        type: {
          name: "Number"
        }
      },
      cumulativeSumOfRewards: {
        required: true,
        serializedName: "cumulativeSumOfRewards",
        type: {
          name: "Number"
        }
      },
      cumulativeNumberOfMatchedEvents: {
        required: true,
        serializedName: "cumulativeNumberOfMatchedEvents",
        type: {
          name: "Number"
        }
      },
      cumulativeSumOfImitatedRewards: {
        required: true,
        serializedName: "cumulativeSumOfImitatedRewards",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ModelProperties: msRest.CompositeMapper = {
  serializedName: "ModelProperties",
  type: {
    name: "Composite",
    className: "ModelProperties",
    modelProperties: {
      creationTime: {
        readOnly: true,
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        readOnly: true,
        serializedName: "lastModifiedTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ModelMetadata: msRest.CompositeMapper = {
  serializedName: "ModelMetadata",
  type: {
    name: "Composite",
    className: "ModelMetadata",
    modelProperties: {
      modelId: {
        required: true,
        serializedName: "modelId",
        type: {
          name: "String"
        }
      },
      userDescription: {
        required: true,
        serializedName: "userDescription",
        type: {
          name: "String"
        }
      },
      creationDate: {
        required: true,
        serializedName: "creationDate",
        type: {
          name: "DateTime"
        }
      },
      lastConfigEditDate: {
        required: true,
        serializedName: "lastConfigEditDate",
        type: {
          name: "DateTime"
        }
      },
      firstEventId: {
        required: true,
        serializedName: "firstEventId",
        type: {
          name: "String"
        }
      },
      lastEventId: {
        required: true,
        serializedName: "lastEventId",
        type: {
          name: "String"
        }
      },
      savedInHistory: {
        required: true,
        serializedName: "savedInHistory",
        type: {
          name: "Boolean"
        }
      },
      numberOfEventsLearnedSinceLastExport: {
        required: true,
        serializedName: "numberOfEventsLearnedSinceLastExport",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RankableAction: msRest.CompositeMapper = {
  serializedName: "RankableAction",
  type: {
    name: "Composite",
    className: "RankableAction",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        constraints: {
          MaxLength: 256,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      },
      features: {
        required: true,
        serializedName: "features",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Object"
            }
          }
        }
      }
    }
  }
};

export const RankRequest: msRest.CompositeMapper = {
  serializedName: "RankRequest",
  type: {
    name: "Composite",
    className: "RankRequest",
    modelProperties: {
      contextFeatures: {
        serializedName: "contextFeatures",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Object"
            }
          }
        }
      },
      actions: {
        required: true,
        serializedName: "actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RankableAction"
            }
          }
        }
      },
      excludedActions: {
        serializedName: "excludedActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      eventId: {
        serializedName: "eventId",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      deferActivation: {
        serializedName: "deferActivation",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RankedAction: msRest.CompositeMapper = {
  serializedName: "RankedAction",
  type: {
    name: "Composite",
    className: "RankedAction",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      probability: {
        readOnly: true,
        serializedName: "probability",
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RankResponse: msRest.CompositeMapper = {
  serializedName: "RankResponse",
  type: {
    name: "Composite",
    className: "RankResponse",
    modelProperties: {
      ranking: {
        readOnly: true,
        serializedName: "ranking",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RankedAction"
            }
          }
        }
      },
      eventId: {
        readOnly: true,
        serializedName: "eventId",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      rewardActionId: {
        readOnly: true,
        serializedName: "rewardActionId",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerStatus: msRest.CompositeMapper = {
  serializedName: "ContainerStatus",
  type: {
    name: "Composite",
    className: "ContainerStatus",
    modelProperties: {
      service: {
        serializedName: "service",
        type: {
          name: "String"
        }
      },
      apiStatus: {
        serializedName: "apiStatus",
        type: {
          name: "String"
        }
      },
      apiStatusMessage: {
        serializedName: "apiStatusMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EvaluationsCreateHeaders: msRest.CompositeMapper = {
  serializedName: "evaluations-create-headers",
  type: {
    name: "Composite",
    className: "EvaluationsCreateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};
