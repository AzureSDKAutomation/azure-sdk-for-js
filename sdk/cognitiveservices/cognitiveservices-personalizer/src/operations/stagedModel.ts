/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/stagedModelMappers";
import * as Parameters from "../models/parameters";
import { PersonalizerClientContext } from "../personalizerClientContext";

/** Class representing a StagedModel. */
export class StagedModel {
  private readonly client: PersonalizerClientContext;

  /**
   * Create a StagedModel.
   * @param {PersonalizerClientContext} client Reference to the service client.
   */
  constructor(client: PersonalizerClientContext) {
    this.client = client;
  }

  /**
   * List staged models generated by Personalizer service.
   * @summary List Staged Models
   * @param [options] The optional parameters
   * @returns Promise<Models.StagedModelListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.StagedModelListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.ModelMetadata[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ModelMetadata[]>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ModelMetadata[]>, callback?: msRest.ServiceCallback<Models.ModelMetadata[]>): Promise<Models.StagedModelListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.StagedModelListResponse>;
  }

  /**
   * Get the staged model file generated by Personalizer service, given a model id.
   * @summary Get Staged Model
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.StagedModelGetByIdResponse>
   */
  getById(id: string, options?: msRest.RequestOptionsBase): Promise<Models.StagedModelGetByIdResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getById(id: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getById(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getById(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.StagedModelGetByIdResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getByIdOperationSpec,
      callback) as Promise<Models.StagedModelGetByIdResponse>;
  }

  /**
   * Update the metadata of a staged model, given a model id.
   * Only the boolean `savedInHistory` and the string `userDescription` can be updated. Other fields
   * are readonly.
   * @summary Update Staged Model
   * @param metadata
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.StagedModelUpdateMetadataByIdResponse>
   */
  updateMetadataById(metadata: Models.ModelMetadata, id: string, options?: msRest.RequestOptionsBase): Promise<Models.StagedModelUpdateMetadataByIdResponse>;
  /**
   * @param metadata
   * @param id
   * @param callback The callback
   */
  updateMetadataById(metadata: Models.ModelMetadata, id: string, callback: msRest.ServiceCallback<Models.ModelMetadata>): void;
  /**
   * @param metadata
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  updateMetadataById(metadata: Models.ModelMetadata, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ModelMetadata>): void;
  updateMetadataById(metadata: Models.ModelMetadata, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ModelMetadata>, callback?: msRest.ServiceCallback<Models.ModelMetadata>): Promise<Models.StagedModelUpdateMetadataByIdResponse> {
    return this.client.sendOperationRequest(
      {
        metadata,
        id,
        options
      },
      updateMetadataByIdOperationSpec,
      callback) as Promise<Models.StagedModelUpdateMetadataByIdResponse>;
  }

  /**
   * Reset the staged model file generated by Personalizer service, given a model id.
   * @summary Reset Staged Model
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resetById(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  resetById(id: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  resetById(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  resetById(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      resetByIdOperationSpec,
      callback);
  }

  /**
   * Publish the staged model file generated by Personalizer service, given a model id.
   * @summary Publish Staged Model
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  publish(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  publish(id: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  publish(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  publish(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      publishOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "staged-model",
  urlParameters: [
    Parameters.endpoint
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelMetadata"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "staged-model/{id}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {}
  },
  serializer
};

const updateMetadataByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "staged-model/{id}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.id
  ],
  requestBody: {
    parameterPath: "metadata",
    mapper: {
      ...Mappers.ModelMetadata,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ModelMetadata
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const resetByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "staged-model/{id}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.id
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const publishOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "staged-model/{id}/publish",
  urlParameters: [
    Parameters.endpoint,
    Parameters.id
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
