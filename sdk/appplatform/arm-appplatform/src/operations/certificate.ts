/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/certificateMappers";
import * as Parameters from "../models/parameters";
import { AppPlatformManagementClientContext } from "../appPlatformManagementClientContext";

/** Class representing a Certificate. */
export class Certificate {
  private readonly client: AppPlatformManagementClientContext;

  /**
   * Create a Certificate.
   * @param {AppPlatformManagementClientContext} client Reference to the service client.
   */
  constructor(client: AppPlatformManagementClientContext) {
    this.client = client;
  }

  /**
   * Get the certificate resource.
   * @param certificateName
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateGetAsyncResponse>
   */
  getAsync(certificateName: string, resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateGetAsyncResponse>;
  /**
   * @param certificateName
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param callback The callback
   */
  getAsync(certificateName: string, resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.CertificateResource>): void;
  /**
   * @param certificateName
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAsync(certificateName: string, resourceGroupName: string, serviceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateResource>): void;
  getAsync(certificateName: string, resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateResource>, callback?: msRest.ServiceCallback<Models.CertificateResource>): Promise<Models.CertificateGetAsyncResponse> {
    return this.client.sendOperationRequest(
      {
        certificateName,
        resourceGroupName,
        serviceName,
        options
      },
      getAsyncOperationSpec,
      callback) as Promise<Models.CertificateGetAsyncResponse>;
  }

  /**
   * Create or update certificate resource.
   * @param certificateName
   * @param certificateResource
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateCreateOrUpdateAsyncResponse>
   */
  createOrUpdateAsync(certificateName: string, certificateResource: Models.CertificateResource, resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateCreateOrUpdateAsyncResponse> {
    return this.beginCreateOrUpdateAsync(certificateName,certificateResource,resourceGroupName,serviceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.CertificateCreateOrUpdateAsyncResponse>;
  }

  /**
   * Delete the certificate resource.
   * @param certificateName
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateDeleteAsyncResponse>
   */
  deleteAsync(certificateName: string, resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateDeleteAsyncResponse>;
  /**
   * @param certificateName
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param callback The callback
   */
  deleteAsync(certificateName: string, resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.CertificateResource>): void;
  /**
   * @param certificateName
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAsync(certificateName: string, resourceGroupName: string, serviceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateResource>): void;
  deleteAsync(certificateName: string, resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateResource>, callback?: msRest.ServiceCallback<Models.CertificateResource>): Promise<Models.CertificateDeleteAsyncResponse> {
    return this.client.sendOperationRequest(
      {
        certificateName,
        resourceGroupName,
        serviceName,
        options
      },
      deleteAsyncOperationSpec,
      callback) as Promise<Models.CertificateDeleteAsyncResponse>;
  }

  /**
   * List all the certificates of one user.
   * @param certificateName
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateListAsyncResponse>
   */
  listAsync(certificateName: string, resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateListAsyncResponse>;
  /**
   * @param certificateName
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param callback The callback
   */
  listAsync(certificateName: string, resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.CertificateResourceCollection>): void;
  /**
   * @param certificateName
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAsync(certificateName: string, resourceGroupName: string, serviceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateResourceCollection>): void;
  listAsync(certificateName: string, resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateResourceCollection>, callback?: msRest.ServiceCallback<Models.CertificateResourceCollection>): Promise<Models.CertificateListAsyncResponse> {
    return this.client.sendOperationRequest(
      {
        certificateName,
        resourceGroupName,
        serviceName,
        options
      },
      listAsyncOperationSpec,
      callback) as Promise<Models.CertificateListAsyncResponse>;
  }

  /**
   * Create or update certificate resource.
   * @param certificateName
   * @param certificateResource
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateAsync(certificateName: string, certificateResource: Models.CertificateResource, resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        certificateName,
        certificateResource,
        resourceGroupName,
        serviceName,
        options
      },
      beginCreateOrUpdateAsyncOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAsyncOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}",
  urlParameters: [
    Parameters.certificateName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteAsyncOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}",
  urlParameters: [
    Parameters.certificateName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateResource
    },
    204: {
      bodyMapper: Mappers.CertificateResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAsyncOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates",
  urlParameters: [
    Parameters.certificateName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateResourceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateAsyncOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}",
  urlParameters: [
    Parameters.certificateName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "certificateResource",
    mapper: {
      ...Mappers.CertificateResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CertificateResource
    },
    201: {
      bodyMapper: Mappers.CertificateResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
