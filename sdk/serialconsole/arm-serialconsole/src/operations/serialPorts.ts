/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/serialPortsMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftSerialConsoleClientContext } from "../microsoftSerialConsoleClientContext";

/** Class representing a SerialPorts. */
export class SerialPorts {
  private readonly client: MicrosoftSerialConsoleClientContext;

  /**
   * Create a SerialPorts.
   * @param {MicrosoftSerialConsoleClientContext} client Reference to the service client.
   */
  constructor(client: MicrosoftSerialConsoleClientContext) {
    this.client = client;
  }

  /**
   * Lists all of the configured serial ports for a parent resource
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example:
   * 'virtualMachines' or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port.
   * For example: the name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<Models.SerialPortsListResponse>
   */
  list(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, options?: msRest.RequestOptionsBase): Promise<Models.SerialPortsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example:
   * 'virtualMachines' or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port.
   * For example: the name of the virtual machine.
   * @param callback The callback
   */
  list(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, callback: msRest.ServiceCallback<Models.SerialPortListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example:
   * 'virtualMachines' or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port.
   * For example: the name of the virtual machine.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SerialPortListResult>): void;
  list(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SerialPortListResult>, callback?: msRest.ServiceCallback<Models.SerialPortListResult>): Promise<Models.SerialPortsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourceType,
        parentResource,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SerialPortsListResponse>;
  }

  /**
   * Gets the configured settings for a serial port
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example:
   * 'virtualMachines' or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port.
   * For example: the name of the virtual machine.
   * @param serialPort The name of the serial port to connect to.
   * @param [options] The optional parameters
   * @returns Promise<Models.SerialPortsGetResponse>
   */
  get(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, options?: msRest.RequestOptionsBase): Promise<Models.SerialPortsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example:
   * 'virtualMachines' or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port.
   * For example: the name of the virtual machine.
   * @param serialPort The name of the serial port to connect to.
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, callback: msRest.ServiceCallback<Models.SerialPort>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example:
   * 'virtualMachines' or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port.
   * For example: the name of the virtual machine.
   * @param serialPort The name of the serial port to connect to.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SerialPort>): void;
  get(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SerialPort>, callback?: msRest.ServiceCallback<Models.SerialPort>): Promise<Models.SerialPortsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourceType,
        parentResource,
        serialPort,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SerialPortsGetResponse>;
  }

  /**
   * Creates or updates a serial port
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example:
   * 'virtualMachines' or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port.
   * For example: the name of the virtual machine.
   * @param serialPort The name of the serial port to create.
   * @param parameters Parameters supplied to create the serial port.
   * @param [options] The optional parameters
   * @returns Promise<Models.SerialPortsCreateResponse>
   */
  create(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, parameters: Models.SerialPort, options?: msRest.RequestOptionsBase): Promise<Models.SerialPortsCreateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example:
   * 'virtualMachines' or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port.
   * For example: the name of the virtual machine.
   * @param serialPort The name of the serial port to create.
   * @param parameters Parameters supplied to create the serial port.
   * @param callback The callback
   */
  create(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, parameters: Models.SerialPort, callback: msRest.ServiceCallback<Models.SerialPort>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example:
   * 'virtualMachines' or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port.
   * For example: the name of the virtual machine.
   * @param serialPort The name of the serial port to create.
   * @param parameters Parameters supplied to create the serial port.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, parameters: Models.SerialPort, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SerialPort>): void;
  create(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, parameters: Models.SerialPort, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SerialPort>, callback?: msRest.ServiceCallback<Models.SerialPort>): Promise<Models.SerialPortsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourceType,
        parentResource,
        serialPort,
        parameters,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.SerialPortsCreateResponse>;
  }

  /**
   * Deletes a serial port
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example:
   * 'virtualMachines' or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port.
   * For example: the name of the virtual machine.
   * @param serialPort The name of the serial port to delete.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example:
   * 'virtualMachines' or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port.
   * For example: the name of the virtual machine.
   * @param serialPort The name of the serial port to delete.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example:
   * 'virtualMachines' or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port.
   * For example: the name of the virtual machine.
   * @param serialPort The name of the serial port to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourceType,
        parentResource,
        serialPort,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Handles requests to list all SerialPort resources in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.SerialPortsListBySubscriptionsResponse>
   */
  listBySubscriptions(options?: msRest.RequestOptionsBase): Promise<Models.SerialPortsListBySubscriptionsResponse>;
  /**
   * @param callback The callback
   */
  listBySubscriptions(callback: msRest.ServiceCallback<Models.SerialPortListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptions(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SerialPortListResult>): void;
  listBySubscriptions(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SerialPortListResult>, callback?: msRest.ServiceCallback<Models.SerialPortListResult>): Promise<Models.SerialPortsListBySubscriptionsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionsOperationSpec,
      callback) as Promise<Models.SerialPortsListBySubscriptionsResponse>;
  }

  /**
   * Connect to serial port of the target resource
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example:
   * 'virtualMachines' or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port.
   * For example: the name of the virtual machine.
   * @param serialPort The name of the serial port to connect to.
   * @param [options] The optional parameters
   * @returns Promise<Models.SerialPortsConnectResponse>
   */
  connect(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, options?: msRest.RequestOptionsBase): Promise<Models.SerialPortsConnectResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example:
   * 'virtualMachines' or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port.
   * For example: the name of the virtual machine.
   * @param serialPort The name of the serial port to connect to.
   * @param callback The callback
   */
  connect(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, callback: msRest.ServiceCallback<Models.SerialPortConnectResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example:
   * 'virtualMachines' or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port.
   * For example: the name of the virtual machine.
   * @param serialPort The name of the serial port to connect to.
   * @param options The optional parameters
   * @param callback The callback
   */
  connect(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SerialPortConnectResult>): void;
  connect(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SerialPortConnectResult>, callback?: msRest.ServiceCallback<Models.SerialPortConnectResult>): Promise<Models.SerialPortsConnectResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourceType,
        parentResource,
        serialPort,
        options
      },
      connectOperationSpec,
      callback) as Promise<Models.SerialPortsConnectResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResource,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SerialPortListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResource,
    Parameters.serialPort,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SerialPort
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResource,
    Parameters.serialPort,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.SerialPort,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.SerialPort
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResource,
    Parameters.serialPort,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.SerialConsole/serialPorts",
  urlParameters: [
    Parameters.subscriptionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SerialPortListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const connectOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}/connect",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResource,
    Parameters.serialPort,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SerialPortConnectResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
