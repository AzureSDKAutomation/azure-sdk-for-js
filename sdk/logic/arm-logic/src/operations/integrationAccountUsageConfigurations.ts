/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/integrationAccountUsageConfigurationsMappers";
import * as Parameters from "../models/parameters";
import { LogicManagementClientContext } from "../logicManagementClientContext";

/** Class representing a IntegrationAccountUsageConfigurations. */
export class IntegrationAccountUsageConfigurations {
  private readonly client: LogicManagementClientContext;

  /**
   * Create a IntegrationAccountUsageConfigurations.
   * @param {LogicManagementClientContext} client Reference to the service client.
   */
  constructor(client: LogicManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets a list of integration account usage configurations.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.IntegrationAccountUsageConfigurationsListResponse>
   */
  list(resourceGroupName: string, integrationAccountName: string, options?: Models.IntegrationAccountUsageConfigurationsListOptionalParams): Promise<Models.IntegrationAccountUsageConfigurationsListResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param callback The callback
   */
  list(resourceGroupName: string, integrationAccountName: string, callback: msRest.ServiceCallback<Models.IntegrationAccountUsageConfigurationListResult>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, integrationAccountName: string, options: Models.IntegrationAccountUsageConfigurationsListOptionalParams, callback: msRest.ServiceCallback<Models.IntegrationAccountUsageConfigurationListResult>): void;
  list(resourceGroupName: string, integrationAccountName: string, options?: Models.IntegrationAccountUsageConfigurationsListOptionalParams | msRest.ServiceCallback<Models.IntegrationAccountUsageConfigurationListResult>, callback?: msRest.ServiceCallback<Models.IntegrationAccountUsageConfigurationListResult>): Promise<Models.IntegrationAccountUsageConfigurationsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.IntegrationAccountUsageConfigurationsListResponse>;
  }

  /**
   * Gets an integration account usage configuration.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param usageConfigurationName The integration account usage configuration name.
   * @param [options] The optional parameters
   * @returns Promise<Models.IntegrationAccountUsageConfigurationsGetResponse>
   */
  get(resourceGroupName: string, integrationAccountName: string, usageConfigurationName: string, options?: msRest.RequestOptionsBase): Promise<Models.IntegrationAccountUsageConfigurationsGetResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param usageConfigurationName The integration account usage configuration name.
   * @param callback The callback
   */
  get(resourceGroupName: string, integrationAccountName: string, usageConfigurationName: string, callback: msRest.ServiceCallback<Models.IntegrationAccountUsageConfiguration>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param usageConfigurationName The integration account usage configuration name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, integrationAccountName: string, usageConfigurationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IntegrationAccountUsageConfiguration>): void;
  get(resourceGroupName: string, integrationAccountName: string, usageConfigurationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IntegrationAccountUsageConfiguration>, callback?: msRest.ServiceCallback<Models.IntegrationAccountUsageConfiguration>): Promise<Models.IntegrationAccountUsageConfigurationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        usageConfigurationName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.IntegrationAccountUsageConfigurationsGetResponse>;
  }

  /**
   * Creates or updates an integration account usage configuration.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param usageConfigurationName The integration account usage configuration name.
   * @param usageConfiguration The integration account usage configuration.
   * @param [options] The optional parameters
   * @returns Promise<Models.IntegrationAccountUsageConfigurationsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, integrationAccountName: string, usageConfigurationName: string, usageConfiguration: Models.IntegrationAccountUsageConfiguration, options?: msRest.RequestOptionsBase): Promise<Models.IntegrationAccountUsageConfigurationsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param usageConfigurationName The integration account usage configuration name.
   * @param usageConfiguration The integration account usage configuration.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, integrationAccountName: string, usageConfigurationName: string, usageConfiguration: Models.IntegrationAccountUsageConfiguration, callback: msRest.ServiceCallback<Models.IntegrationAccountUsageConfiguration>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param usageConfigurationName The integration account usage configuration name.
   * @param usageConfiguration The integration account usage configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, integrationAccountName: string, usageConfigurationName: string, usageConfiguration: Models.IntegrationAccountUsageConfiguration, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IntegrationAccountUsageConfiguration>): void;
  createOrUpdate(resourceGroupName: string, integrationAccountName: string, usageConfigurationName: string, usageConfiguration: Models.IntegrationAccountUsageConfiguration, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IntegrationAccountUsageConfiguration>, callback?: msRest.ServiceCallback<Models.IntegrationAccountUsageConfiguration>): Promise<Models.IntegrationAccountUsageConfigurationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        usageConfigurationName,
        usageConfiguration,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.IntegrationAccountUsageConfigurationsCreateOrUpdateResponse>;
  }

  /**
   * Deletes an integration account usage configuration.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param usageConfigurationName The integration account usage configuration name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, integrationAccountName: string, usageConfigurationName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param usageConfigurationName The integration account usage configuration name.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, integrationAccountName: string, usageConfigurationName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param usageConfigurationName The integration account usage configuration name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, integrationAccountName: string, usageConfigurationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, integrationAccountName: string, usageConfigurationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        usageConfigurationName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Get the callback url.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param usageConfigurationName The integration account usage configuration name.
   * @param listCallbackUrlParameter
   * @param [options] The optional parameters
   * @returns Promise<Models.IntegrationAccountUsageConfigurationsListCallbackUrlResponse>
   */
  listCallbackUrl(resourceGroupName: string, integrationAccountName: string, usageConfigurationName: string, listCallbackUrlParameter: Models.GetCallbackUrlParameters, options?: msRest.RequestOptionsBase): Promise<Models.IntegrationAccountUsageConfigurationsListCallbackUrlResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param usageConfigurationName The integration account usage configuration name.
   * @param listCallbackUrlParameter
   * @param callback The callback
   */
  listCallbackUrl(resourceGroupName: string, integrationAccountName: string, usageConfigurationName: string, listCallbackUrlParameter: Models.GetCallbackUrlParameters, callback: msRest.ServiceCallback<Models.WorkflowTriggerCallbackUrl>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param usageConfigurationName The integration account usage configuration name.
   * @param listCallbackUrlParameter
   * @param options The optional parameters
   * @param callback The callback
   */
  listCallbackUrl(resourceGroupName: string, integrationAccountName: string, usageConfigurationName: string, listCallbackUrlParameter: Models.GetCallbackUrlParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WorkflowTriggerCallbackUrl>): void;
  listCallbackUrl(resourceGroupName: string, integrationAccountName: string, usageConfigurationName: string, listCallbackUrlParameter: Models.GetCallbackUrlParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WorkflowTriggerCallbackUrl>, callback?: msRest.ServiceCallback<Models.WorkflowTriggerCallbackUrl>): Promise<Models.IntegrationAccountUsageConfigurationsListCallbackUrlResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        usageConfigurationName,
        listCallbackUrlParameter,
        options
      },
      listCallbackUrlOperationSpec,
      callback) as Promise<Models.IntegrationAccountUsageConfigurationsListCallbackUrlResponse>;
  }

  /**
   * Gets a list of integration account usage configurations.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IntegrationAccountUsageConfigurationsListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.IntegrationAccountUsageConfigurationsListNextOptionalParams): Promise<Models.IntegrationAccountUsageConfigurationsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.IntegrationAccountUsageConfigurationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.IntegrationAccountUsageConfigurationsListNextOptionalParams, callback: msRest.ServiceCallback<Models.IntegrationAccountUsageConfigurationListResult>): void;
  listNext(nextPageLink: string, options?: Models.IntegrationAccountUsageConfigurationsListNextOptionalParams | msRest.ServiceCallback<Models.IntegrationAccountUsageConfigurationListResult>, callback?: msRest.ServiceCallback<Models.IntegrationAccountUsageConfigurationListResult>): Promise<Models.IntegrationAccountUsageConfigurationsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.IntegrationAccountUsageConfigurationsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/usageConfigurations",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccountUsageConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/usageConfigurations/{usageConfigurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.usageConfigurationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccountUsageConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/usageConfigurations/{usageConfigurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.usageConfigurationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "usageConfiguration",
    mapper: {
      ...Mappers.IntegrationAccountUsageConfiguration,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccountUsageConfiguration
    },
    201: {
      bodyMapper: Mappers.IntegrationAccountUsageConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/usageConfigurations/{usageConfigurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.usageConfigurationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listCallbackUrlOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/usageConfigurations/{usageConfigurationName}/listCallbackUrl",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.usageConfigurationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "listCallbackUrlParameter",
    mapper: {
      ...Mappers.GetCallbackUrlParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowTriggerCallbackUrl
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccountUsageConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
