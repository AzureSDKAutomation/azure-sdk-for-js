/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/diskPoolsMappers";
import * as Parameters from "../models/parameters";
import { StoragePoolManagementContext } from "../storagePoolManagementContext";

/** Class representing a DiskPools. */
export class DiskPools {
  private readonly client: StoragePoolManagementContext;

  /**
   * Create a DiskPools.
   * @param {StoragePoolManagementContext} client Reference to the service client.
   */
  constructor(client: StoragePoolManagementContext) {
    this.client = client;
  }

  /**
   * Gets a list of Disk Pools in a subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskPoolsListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.DiskPoolsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.DiskPoolListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiskPoolListResult>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiskPoolListResult>, callback?: msRest.ServiceCallback<Models.DiskPoolListResult>): Promise<Models.DiskPoolsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.DiskPoolsListBySubscriptionResponse>;
  }

  /**
   * Gets a list of DiskPools in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskPoolsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.DiskPoolsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.DiskPoolListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiskPoolListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiskPoolListResult>, callback?: msRest.ServiceCallback<Models.DiskPoolListResult>): Promise<Models.DiskPoolsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.DiskPoolsListByResourceGroupResponse>;
  }

  /**
   * Create or Update Disk pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk pool.
   * @param diskPoolCreatePayload Request payload for Disk pool create operation
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskPoolsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, diskPoolName: string, diskPoolCreatePayload: Models.DiskPoolCreate, options?: msRest.RequestOptionsBase): Promise<Models.DiskPoolsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,diskPoolName,diskPoolCreatePayload,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DiskPoolsCreateOrUpdateResponse>;
  }

  /**
   * Update a Disk pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk pool.
   * @param diskPoolUpdatePayload Request payload for Disk pool update operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskPoolsUpdateResponse>
   */
  update(resourceGroupName: string, diskPoolName: string, diskPoolUpdatePayload: Models.DiskPoolUpdate, options?: msRest.RequestOptionsBase): Promise<Models.DiskPoolsUpdateResponse> {
    return this.beginUpdate(resourceGroupName,diskPoolName,diskPoolUpdatePayload,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DiskPoolsUpdateResponse>;
  }

  /**
   * Delete a Disk pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk pool.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, diskPoolName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,diskPoolName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Get a Disk pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk pool.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskPoolsGetResponse>
   */
  get(resourceGroupName: string, diskPoolName: string, options?: msRest.RequestOptionsBase): Promise<Models.DiskPoolsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk pool.
   * @param callback The callback
   */
  get(resourceGroupName: string, diskPoolName: string, callback: msRest.ServiceCallback<Models.DiskPool>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk pool.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, diskPoolName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiskPool>): void;
  get(resourceGroupName: string, diskPoolName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiskPool>, callback?: msRest.ServiceCallback<Models.DiskPool>): Promise<Models.DiskPoolsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        diskPoolName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DiskPoolsGetResponse>;
  }

  /**
   * Create or Update Disk pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk pool.
   * @param diskPoolCreatePayload Request payload for Disk pool create operation
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, diskPoolName: string, diskPoolCreatePayload: Models.DiskPoolCreate, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        diskPoolName,
        diskPoolCreatePayload,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Update a Disk pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk pool.
   * @param diskPoolUpdatePayload Request payload for Disk pool update operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, diskPoolName: string, diskPoolUpdatePayload: Models.DiskPoolUpdate, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        diskPoolName,
        diskPoolUpdatePayload,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Delete a Disk pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk pool.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, diskPoolName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        diskPoolName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Gets a list of Disk Pools in a subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskPoolsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DiskPoolsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DiskPoolListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiskPoolListResult>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiskPoolListResult>, callback?: msRest.ServiceCallback<Models.DiskPoolListResult>): Promise<Models.DiskPoolsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.DiskPoolsListBySubscriptionNextResponse>;
  }

  /**
   * Gets a list of DiskPools in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskPoolsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DiskPoolsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DiskPoolListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiskPoolListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiskPoolListResult>, callback?: msRest.ServiceCallback<Models.DiskPoolListResult>): Promise<Models.DiskPoolsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.DiskPoolsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.StoragePool/diskPools",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiskPoolListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiskPoolListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiskPool
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "diskPoolCreatePayload",
    mapper: {
      ...Mappers.DiskPoolCreate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DiskPool
    },
    201: {
      bodyMapper: Mappers.DiskPool
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "diskPoolUpdatePayload",
    mapper: {
      ...Mappers.DiskPoolUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DiskPool
    },
    202: {
      bodyMapper: Mappers.DiskPool
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiskPoolListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiskPoolListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
