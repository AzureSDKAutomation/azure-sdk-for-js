/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Metadata about an operation.
 */
export interface StoragePoolOperationDisplay {
  /**
   * Localized friendly form of the resource provider name.
   */
  provider: string;
  /**
   * Localized friendly form of the resource type related to this action/operation.
   */
  resource: string;
  /**
   * Localized friendly name for the operation, as it should be shown to the user.
   */
  operation: string;
  /**
   * Localized friendly description for the operation, as it should be shown to the user.
   */
  description: string;
}

/**
 * Description of a StoragePool RP Operation
 */
export interface StoragePoolRPOperation {
  /**
   * The name of the operation being performed on this particular object
   */
  name: string;
  /**
   * Indicates whether the operation applies to data-plane.
   */
  isDataAction: boolean;
  /**
   * Indicates the action type.
   */
  actionType?: string;
  /**
   * Additional metadata about RP operation.
   */
  display: StoragePoolOperationDisplay;
  /**
   * The intended executor of the operation; governs the display of the operation in the RBAC UX
   * and the audit logs UX.
   */
  origin?: string;
}

/**
 * Azure Managed Disk to attach to the Disk pool.
 */
export interface Disk {
  /**
   * Unique Azure Resource ID of the Managed Disk.
   */
  id: string;
}

/**
 * Resource metadata required by ARM RPC.
 */
export interface SystemMetadata {
  /**
   * A string identifier for the identity that created the resource.
   */
  createdBy?: string;
  /**
   * The type of identity that created the resource: user, application, managedIdentity.
   */
  createdByType?: string;
  /**
   * The timestamp of resource creation (UTC).
   */
  createdAt?: string;
  /**
   * A string identifier for the identity that last modified the resource.
   */
  lastModifiedBy?: string;
  /**
   * The type of identity that last modified the resource: user, application, managedIdentity.
   */
  lastModifiedByType?: string;
  /**
   * The timestamp of resource last modification (UTC).
   */
  lastModifiedAt?: string;
}

/**
 * ARM resource model definition.
 */
export interface Resource extends BaseResource {
  /**
   * Fully qualified resource Id for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or
   * Microsoft.Storage/storageAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * The resource model definition for a ARM tracked top level resource.
 */
export interface TrackedResource extends Resource {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The geo-location where the resource lives.
   */
  location: string;
}

/**
 * Response for Disk pool request.
 */
export interface DiskPool extends TrackedResource {
  /**
   * State of the operation on the resource. Possible values include: 'Invalid', 'Succeeded',
   * 'Failed', 'Canceled', 'Pending', 'Creating', 'Updating', 'Deleting'
   */
  provisioningState: ProvisioningStates;
  /**
   * Logical zone for Disk pool resource; example: ["1"].
   */
  availabilityZones: string[];
  /**
   * Operational status of the Disk pool. Possible values include: 'Invalid', 'Unknown', 'Healthy',
   * 'Unhealthy', 'Updating', 'Running', 'Stopped', 'Stopped (deallocated)'
   */
  status: OperationalStatus;
  /**
   * List of Azure Managed Disks to attach to a Disk pool. Can attach 8 disks at most.
   */
  disks?: Disk[];
  /**
   * Azure Resource ID of a Subnet for the Disk pool.
   */
  subnetId: string;
  /**
   * List of additional capabilities for Disk pool.
   */
  additionalCapabilities?: string[];
  /**
   * Determines the SKU of VM deployed for Disk pool. Possible values include: 'Basic', 'Standard',
   * 'Premium'
   */
  tier: DiskPoolTier;
  /**
   * Resource metadata required by ARM RPC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly systemData?: SystemMetadata;
}

/**
 * Request payload for create or update Disk pool request.
 */
export interface DiskPoolCreate extends BaseResource {
  /**
   * Logical zone for Disk pool resource; example: ["1"].
   */
  availabilityZones: string[];
  /**
   * List of Azure Managed Disks to attach to a Disk pool. Can attach 8 disks at most.
   */
  disks?: Disk[];
  /**
   * Azure Resource ID of a Subnet for the Disk pool.
   */
  subnetId: string;
  /**
   * List of additional capabilities for a Disk pool.
   */
  additionalCapabilities?: string[];
  /**
   * Determines the SKU of VM deployed for Disk pool. Possible values include: 'Basic', 'Standard',
   * 'Premium'
   */
  tier: DiskPoolTier;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The geo-location where the resource lives.
   */
  location: string;
  /**
   * Fully qualified resource Id for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or
   * Microsoft.Storage/storageAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * Request payload for Update Disk pool request.
 */
export interface DiskPoolUpdate {
  /**
   * List of Azure Managed Disks to attach to a Disk pool. Can attach 8 disks at most.
   */
  disks?: Disk[];
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * LUN to expose the Azure Managed Disk.
 */
export interface IscsiLun {
  /**
   * User defined name for iSCSI LUN; example: "lun0"
   */
  name: string;
  /**
   * Azure Resource ID of the Managed Disk.
   */
  managedDiskAzureResourceId: string;
}

/**
 * Access Control List (ACL) for an iSCSI target portal group
 */
export interface Acl {
  /**
   * iSCSI initiator IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:client".
   */
  initiatorIqn: string;
  /**
   * List of LUN names mapped to the ACL.
   */
  mappedLuns: string[];
  /**
   * Username for Challenge Handshake Authentication Protocol (CHAP) authentication.
   */
  username: string;
  /**
   * Password for Challenge Handshake Authentication Protocol (CHAP) authentication.
   */
  password: string;
}

/**
 * Attributes of a iSCSI target portal group.
 */
export interface Attributes {
  /**
   * Indicates whether or not authentication is enabled on the ACL.
   */
  authentication: boolean;
  /**
   * Indicates whether or not write protect is enabled on the LUNs.
   */
  prodModeWriteProtect: boolean;
}

/**
 * Response properties for iSCSI target portal group.
 */
export interface TargetPortalGroup {
  /**
   * List of LUNs to be exposed through iSCSI target portal group.
   */
  luns: IscsiLun[];
  /**
   * Access Control List (ACL) for an iSCSI target portal group.
   */
  acls: Acl[];
  /**
   * Attributes of an iSCSI target portal group.
   */
  attributes: Attributes;
  /**
   * List of private IPv4 addresses to connect to the iSCSI target.
   */
  endpoints: string[];
  /**
   * The tag associated with the iSCSI target portal group.
   */
  tag: number;
  /**
   * The port used by iSCSI target portal group.
   */
  port: number;
}

/**
 * The resource model definition for a ARM proxy resource. It will have everything other than
 * required location and tags
 */
export interface ProxyResource extends Resource {
}

/**
 * Response for iSCSI target requests.
 */
export interface IscsiTarget extends ProxyResource {
  /**
   * State of the operation on the resource. Possible values include: 'Invalid', 'Succeeded',
   * 'Failed', 'Canceled', 'Pending', 'Creating', 'Updating', 'Deleting'
   */
  provisioningState: ProvisioningStates;
  /**
   * Operational status of the iSCSI target. Possible values include: 'Invalid', 'Unknown',
   * 'Healthy', 'Unhealthy', 'Updating', 'Running', 'Stopped', 'Stopped (deallocated)'
   */
  status: OperationalStatus;
  /**
   * List of iSCSI target portal groups. Can have 1 portal group at most.
   */
  tpgs: TargetPortalGroup[];
  /**
   * iSCSI target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server".
   */
  targetIqn: string;
}

/**
 * Target portal group properties for create or update iSCSI target request.
 */
export interface TargetPortalGroupCreate {
  /**
   * List of LUNs to be exposed through the iSCSI target portal group.
   */
  luns: IscsiLun[];
  /**
   * Access Control List (ACL) for an iSCSI target portal group.
   */
  acls: Acl[];
  /**
   * Attributes of an iSCSI target portal group.
   */
  attributes: Attributes;
}

/**
 * Payload for iSCSI target create or update requests.
 */
export interface IscsiTargetCreate extends ProxyResource {
  /**
   * List of iSCSI target portal groups. Can have 1 portal group at most.
   */
  tpgs: TargetPortalGroupCreate[];
  /**
   * iSCSI target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server".
   */
  targetIqn?: string;
}

/**
 * Target portal group properties for update iSCSI target request.
 */
export interface TargetPortalGroupUpdate {
  /**
   * List of LUNs to be exposed through the iSCSI target portal group.
   */
  luns?: IscsiLun[];
  /**
   * Access Control List (ACL) for an iSCSI target portal group.
   */
  acls?: Acl[];
}

/**
 * Payload for iSCSI target update request.
 */
export interface IscsiTargetUpdate {
  /**
   * List of iSCSI target portal groups. Can have 1 portal group at most.
   */
  tpgs: TargetPortalGroupUpdate[];
}

/**
 * The resource management error additional info.
 */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The additional info.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly info?: any;
}

/**
 * The resource management error response.
 */
export interface ErrorResponse {
  /**
   * The error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * The error message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * The error target.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly target?: string;
  /**
   * The error details.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly details?: ErrorResponse[];
  /**
   * The error additional info.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/**
 * The resource management error response.
 */
export interface ErrorModel {
  /**
   * RP error response.
   */
  error?: ErrorResponse;
}

/**
 * An interface representing StoragePoolManagementOptions.
 */
export interface StoragePoolManagementOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * List of operations supported by the RP.
 * @extends Array<StoragePoolRPOperation>
 */
export interface StoragePoolOperationListResult extends Array<StoragePoolRPOperation> {
  /**
   * URI to fetch the next section of the paginated response.
   */
  nextLink?: string;
}

/**
 * @interface
 * List of Disk Pools
 * @extends Array<DiskPool>
 */
export interface DiskPoolListResult extends Array<DiskPool> {
  /**
   * URI to fetch the next section of the paginated response.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * List of iSCSI Targets.
 * @extends Array<IscsiTarget>
 */
export interface IscsiTargetList extends Array<IscsiTarget> {
  /**
   * URI to fetch the next section of the paginated response.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for ProvisioningStates.
 * Possible values include: 'Invalid', 'Succeeded', 'Failed', 'Canceled', 'Pending', 'Creating',
 * 'Updating', 'Deleting'
 * @readonly
 * @enum {string}
 */
export type ProvisioningStates = 'Invalid' | 'Succeeded' | 'Failed' | 'Canceled' | 'Pending' | 'Creating' | 'Updating' | 'Deleting';

/**
 * Defines values for OperationalStatus.
 * Possible values include: 'Invalid', 'Unknown', 'Healthy', 'Unhealthy', 'Updating', 'Running',
 * 'Stopped', 'Stopped (deallocated)'
 * @readonly
 * @enum {string}
 */
export type OperationalStatus = 'Invalid' | 'Unknown' | 'Healthy' | 'Unhealthy' | 'Updating' | 'Running' | 'Stopped' | 'Stopped (deallocated)';

/**
 * Defines values for DiskPoolTier.
 * Possible values include: 'Basic', 'Standard', 'Premium'
 * @readonly
 * @enum {string}
 */
export type DiskPoolTier = 'Basic' | 'Standard' | 'Premium';

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = StoragePoolOperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StoragePoolOperationListResult;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type DiskPoolsListBySubscriptionResponse = DiskPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskPoolListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type DiskPoolsListByResourceGroupResponse = DiskPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskPoolListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DiskPoolsCreateOrUpdateResponse = DiskPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskPool;
    };
};

/**
 * Contains response data for the update operation.
 */
export type DiskPoolsUpdateResponse = DiskPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskPool;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DiskPoolsGetResponse = DiskPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskPool;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type DiskPoolsBeginCreateOrUpdateResponse = DiskPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskPool;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type DiskPoolsBeginUpdateResponse = DiskPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskPool;
    };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type DiskPoolsListBySubscriptionNextResponse = DiskPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskPoolListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type DiskPoolsListByResourceGroupNextResponse = DiskPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskPoolListResult;
    };
};

/**
 * Contains response data for the listByDiskPool operation.
 */
export type IscsiTargetsListByDiskPoolResponse = IscsiTargetList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IscsiTargetList;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IscsiTargetsCreateOrUpdateResponse = IscsiTarget & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IscsiTarget;
    };
};

/**
 * Contains response data for the update operation.
 */
export type IscsiTargetsUpdateResponse = IscsiTarget & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IscsiTarget;
    };
};

/**
 * Contains response data for the get operation.
 */
export type IscsiTargetsGetResponse = IscsiTarget & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IscsiTarget;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type IscsiTargetsBeginCreateOrUpdateResponse = IscsiTarget & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IscsiTarget;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type IscsiTargetsBeginUpdateResponse = IscsiTarget & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IscsiTarget;
    };
};

/**
 * Contains response data for the listByDiskPoolNext operation.
 */
export type IscsiTargetsListByDiskPoolNextResponse = IscsiTargetList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IscsiTargetList;
    };
};
