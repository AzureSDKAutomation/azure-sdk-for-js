/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/agreementMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftMarketplaceOrderingAgreementsContext } from "../microsoftMarketplaceOrderingAgreementsContext";

/** Class representing a Agreement. */
export class Agreement {
  private readonly client: MicrosoftMarketplaceOrderingAgreementsContext;

  /**
   * Create a Agreement.
   * @param {MicrosoftMarketplaceOrderingAgreementsContext} client Reference to the service client.
   */
  constructor(client: MicrosoftMarketplaceOrderingAgreementsContext) {
    this.client = client;
  }

  /**
   * Sign marketplace terms.
   * @param subscriptionId
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.AgreementSignResponse>
   */
  sign(subscriptionId: string, publisherId: string, offerId: string, planId: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.AgreementSignResponse>;
  /**
   * @param subscriptionId
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param callback The callback
   */
  sign(subscriptionId: string, publisherId: string, offerId: string, planId: string, apiVersion: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param subscriptionId
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  sign(subscriptionId: string, publisherId: string, offerId: string, planId: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  sign(subscriptionId: string, publisherId: string, offerId: string, planId: string, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.AgreementSignResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        publisherId,
        offerId,
        planId,
        apiVersion,
        options
      },
      signOperationSpec,
      callback) as Promise<Models.AgreementSignResponse>;
  }

  /**
   * Cancel marketplace terms.
   * @param subscriptionId
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.AgreementCancelResponse>
   */
  cancel(subscriptionId: string, publisherId: string, offerId: string, planId: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.AgreementCancelResponse>;
  /**
   * @param subscriptionId
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param callback The callback
   */
  cancel(subscriptionId: string, publisherId: string, offerId: string, planId: string, apiVersion: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param subscriptionId
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  cancel(subscriptionId: string, publisherId: string, offerId: string, planId: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  cancel(subscriptionId: string, publisherId: string, offerId: string, planId: string, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.AgreementCancelResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        publisherId,
        offerId,
        planId,
        apiVersion,
        options
      },
      cancelOperationSpec,
      callback) as Promise<Models.AgreementCancelResponse>;
  }

  /**
   * Get marketplace agreement.
   * @param subscriptionId
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.AgreementGetAgreementResponse>
   */
  getAgreement(subscriptionId: string, publisherId: string, offerId: string, planId: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.AgreementGetAgreementResponse>;
  /**
   * @param subscriptionId
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param callback The callback
   */
  getAgreement(subscriptionId: string, publisherId: string, offerId: string, planId: string, apiVersion: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param subscriptionId
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  getAgreement(subscriptionId: string, publisherId: string, offerId: string, planId: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getAgreement(subscriptionId: string, publisherId: string, offerId: string, planId: string, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.AgreementGetAgreementResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        publisherId,
        offerId,
        planId,
        apiVersion,
        options
      },
      getAgreementOperationSpec,
      callback) as Promise<Models.AgreementGetAgreementResponse>;
  }

  /**
   * Get marketplace agreement.
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.AgreementGetAgreementTenantResponse>
   */
  getAgreementTenant(publisherId: string, offerId: string, planId: string, apiVersion: string, options?: Models.AgreementGetAgreementTenantOptionalParams): Promise<Models.AgreementGetAgreementTenantResponse>;
  /**
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param callback The callback
   */
  getAgreementTenant(publisherId: string, offerId: string, planId: string, apiVersion: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  getAgreementTenant(publisherId: string, offerId: string, planId: string, apiVersion: string, options: Models.AgreementGetAgreementTenantOptionalParams, callback: msRest.ServiceCallback<any>): void;
  getAgreementTenant(publisherId: string, offerId: string, planId: string, apiVersion: string, options?: Models.AgreementGetAgreementTenantOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.AgreementGetAgreementTenantResponse> {
    return this.client.sendOperationRequest(
      {
        publisherId,
        offerId,
        planId,
        apiVersion,
        options
      },
      getAgreementTenantOperationSpec,
      callback) as Promise<Models.AgreementGetAgreementTenantResponse>;
  }

  /**
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.AgreementSignAgreementTenantResponse>
   */
  signAgreementTenant(publisherId: string, offerId: string, planId: string, apiVersion: string, options?: Models.AgreementSignAgreementTenantOptionalParams): Promise<Models.AgreementSignAgreementTenantResponse>;
  /**
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param callback The callback
   */
  signAgreementTenant(publisherId: string, offerId: string, planId: string, apiVersion: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  signAgreementTenant(publisherId: string, offerId: string, planId: string, apiVersion: string, options: Models.AgreementSignAgreementTenantOptionalParams, callback: msRest.ServiceCallback<any>): void;
  signAgreementTenant(publisherId: string, offerId: string, planId: string, apiVersion: string, options?: Models.AgreementSignAgreementTenantOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.AgreementSignAgreementTenantResponse> {
    return this.client.sendOperationRequest(
      {
        publisherId,
        offerId,
        planId,
        apiVersion,
        options
      },
      signAgreementTenantOperationSpec,
      callback) as Promise<Models.AgreementSignAgreementTenantResponse>;
  }

  /**
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.AgreementCancelAgreementTenantResponse>
   */
  cancelAgreementTenant(publisherId: string, offerId: string, planId: string, apiVersion: string, options?: Models.AgreementCancelAgreementTenantOptionalParams): Promise<Models.AgreementCancelAgreementTenantResponse>;
  /**
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param callback The callback
   */
  cancelAgreementTenant(publisherId: string, offerId: string, planId: string, apiVersion: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelAgreementTenant(publisherId: string, offerId: string, planId: string, apiVersion: string, options: Models.AgreementCancelAgreementTenantOptionalParams, callback: msRest.ServiceCallback<any>): void;
  cancelAgreementTenant(publisherId: string, offerId: string, planId: string, apiVersion: string, options?: Models.AgreementCancelAgreementTenantOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.AgreementCancelAgreementTenantResponse> {
    return this.client.sendOperationRequest(
      {
        publisherId,
        offerId,
        planId,
        apiVersion,
        options
      },
      cancelAgreementTenantOperationSpec,
      callback) as Promise<Models.AgreementCancelAgreementTenantResponse>;
  }

  /**
   * List marketplace agreements in the subscription.
   * @param subscriptionId
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.AgreementGetAgreementsResponse>
   */
  getAgreements(subscriptionId: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.AgreementGetAgreementsResponse>;
  /**
   * @param subscriptionId
   * @param apiVersion
   * @param callback The callback
   */
  getAgreements(subscriptionId: string, apiVersion: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param subscriptionId
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  getAgreements(subscriptionId: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getAgreements(subscriptionId: string, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.AgreementGetAgreementsResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        apiVersion,
        options
      },
      getAgreementsOperationSpec,
      callback) as Promise<Models.AgreementGetAgreementsResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const signOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/sign",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const cancelOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/cancel",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAgreementOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAgreementTenantOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}",
  urlParameters: [
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId
  ],
  queryParameters: [
    Parameters.market,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const signAgreementTenantOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/sign",
  urlParameters: [
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId
  ],
  queryParameters: [
    Parameters.market,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const cancelAgreementTenantOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/cancel",
  urlParameters: [
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId
  ],
  queryParameters: [
    Parameters.market,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAgreementsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
