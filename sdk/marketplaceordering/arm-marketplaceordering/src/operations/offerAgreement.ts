/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/offerAgreementMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftMarketplaceOrderingAgreementsContext } from "../microsoftMarketplaceOrderingAgreementsContext";

/** Class representing a OfferAgreement. */
export class OfferAgreement {
  private readonly client: MicrosoftMarketplaceOrderingAgreementsContext;

  /**
   * Create a OfferAgreement.
   * @param {MicrosoftMarketplaceOrderingAgreementsContext} client Reference to the service client.
   */
  constructor(client: MicrosoftMarketplaceOrderingAgreementsContext) {
    this.client = client;
  }

  /**
   * Get marketplace terms.
   * @param offerType
   * @param subscriptionId
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.OfferAgreementGetAgreementResponse>
   */
  getAgreement(offerType: number, subscriptionId: string, publisherId: string, offerId: string, planId: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.OfferAgreementGetAgreementResponse>;
  /**
   * @param offerType
   * @param subscriptionId
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param callback The callback
   */
  getAgreement(offerType: number, subscriptionId: string, publisherId: string, offerId: string, planId: string, apiVersion: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param offerType
   * @param subscriptionId
   * @param publisherId
   * @param offerId
   * @param planId
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  getAgreement(offerType: number, subscriptionId: string, publisherId: string, offerId: string, planId: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getAgreement(offerType: number, subscriptionId: string, publisherId: string, offerId: string, planId: string, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.OfferAgreementGetAgreementResponse> {
    return this.client.sendOperationRequest(
      {
        offerType,
        subscriptionId,
        publisherId,
        offerId,
        planId,
        apiVersion,
        options
      },
      getAgreementOperationSpec,
      callback) as Promise<Models.OfferAgreementGetAgreementResponse>;
  }

  /**
   * Save marketplace terms.
   * @param subscriptionId
   * @param publisherId
   * @param offerId
   * @param planId
   * @param terms
   * @param offerType
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.OfferAgreementSetAgreementResponse>
   */
  setAgreement(subscriptionId: string, publisherId: string, offerId: string, planId: string, terms: Models.AgreementDefinition, offerType: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.OfferAgreementSetAgreementResponse>;
  /**
   * @param subscriptionId
   * @param publisherId
   * @param offerId
   * @param planId
   * @param terms
   * @param offerType
   * @param apiVersion
   * @param callback The callback
   */
  setAgreement(subscriptionId: string, publisherId: string, offerId: string, planId: string, terms: Models.AgreementDefinition, offerType: string, apiVersion: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param subscriptionId
   * @param publisherId
   * @param offerId
   * @param planId
   * @param terms
   * @param offerType
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  setAgreement(subscriptionId: string, publisherId: string, offerId: string, planId: string, terms: Models.AgreementDefinition, offerType: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  setAgreement(subscriptionId: string, publisherId: string, offerId: string, planId: string, terms: Models.AgreementDefinition, offerType: string, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.OfferAgreementSetAgreementResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        publisherId,
        offerId,
        planId,
        terms,
        offerType,
        apiVersion,
        options
      },
      setAgreementOperationSpec,
      callback) as Promise<Models.OfferAgreementSetAgreementResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAgreementOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current",
  urlParameters: [
    Parameters.offerType0,
    Parameters.subscriptionId,
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const setAgreementOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId,
    Parameters.offerType1
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "terms",
    mapper: {
      ...Mappers.AgreementDefinition,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
