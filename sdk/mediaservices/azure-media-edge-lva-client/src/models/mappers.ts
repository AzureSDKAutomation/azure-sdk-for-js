/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const MediaGraphSystemData: msRest.CompositeMapper = {
  serializedName: "MediaGraphSystemData",
  type: {
    name: "Composite",
    className: "MediaGraphSystemData",
    modelProperties: {
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const MediaGraphParameterDefinition: msRest.CompositeMapper = {
  serializedName: "MediaGraphParameterDefinition",
  type: {
    name: "Composite",
    className: "MediaGraphParameterDefinition",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphInstanceProperties: msRest.CompositeMapper = {
  serializedName: "MediaGraphInstanceProperties",
  type: {
    name: "Composite",
    className: "MediaGraphInstanceProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      topologyName: {
        serializedName: "topologyName",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MediaGraphParameterDefinition"
            }
          }
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "Inactive",
            "Activating",
            "Active",
            "Deactivating"
          ]
        }
      }
    }
  }
};

export const MediaGraphInstance: msRest.CompositeMapper = {
  serializedName: "MediaGraphInstance",
  type: {
    name: "Composite",
    className: "MediaGraphInstance",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      apiVersion: {
        serializedName: "@apiVersion",
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "MediaGraphSystemData"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MediaGraphInstanceProperties"
        }
      }
    }
  }
};

export const MediaGraphInstanceCollection: msRest.CompositeMapper = {
  serializedName: "MediaGraphInstanceCollection",
  type: {
    name: "Composite",
    className: "MediaGraphInstanceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MediaGraphInstance"
            }
          }
        }
      },
      continuationToken: {
        serializedName: "@continuationToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphParameterDeclaration: msRest.CompositeMapper = {
  serializedName: "MediaGraphParameterDeclaration",
  type: {
    name: "Composite",
    className: "MediaGraphParameterDeclaration",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        constraints: {
          MaxLength: 64
        },
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "String",
            "SecretString",
            "Int",
            "Double",
            "Bool"
          ]
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      default: {
        serializedName: "default",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphSource: msRest.CompositeMapper = {
  serializedName: "MediaGraphSource",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "type"
    },
    uberParent: "MediaGraphSource",
    className: "MediaGraphSource",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "@type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphOutputSelector: msRest.CompositeMapper = {
  serializedName: "MediaGraphOutputSelector",
  type: {
    name: "Composite",
    className: "MediaGraphOutputSelector",
    modelProperties: {
      property: {
        serializedName: "property",
        type: {
          name: "Enum",
          allowedValues: [
            "mediaType"
          ]
        }
      },
      operator: {
        serializedName: "operator",
        type: {
          name: "Enum",
          allowedValues: [
            "is",
            "isNot"
          ]
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphNodeInput: msRest.CompositeMapper = {
  serializedName: "MediaGraphNodeInput",
  type: {
    name: "Composite",
    className: "MediaGraphNodeInput",
    modelProperties: {
      nodeName: {
        serializedName: "nodeName",
        type: {
          name: "String"
        }
      },
      outputSelectors: {
        serializedName: "outputSelectors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MediaGraphOutputSelector"
            }
          }
        }
      }
    }
  }
};

export const MediaGraphProcessor: msRest.CompositeMapper = {
  serializedName: "MediaGraphProcessor",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "type"
    },
    uberParent: "MediaGraphProcessor",
    className: "MediaGraphProcessor",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      inputs: {
        required: true,
        serializedName: "inputs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MediaGraphNodeInput"
            }
          }
        }
      },
      type: {
        required: true,
        serializedName: "@type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphSink: msRest.CompositeMapper = {
  serializedName: "MediaGraphSink",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "type"
    },
    uberParent: "MediaGraphSink",
    className: "MediaGraphSink",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      inputs: {
        required: true,
        serializedName: "inputs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MediaGraphNodeInput"
            }
          }
        }
      },
      type: {
        required: true,
        serializedName: "@type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphTopologyProperties: msRest.CompositeMapper = {
  serializedName: "MediaGraphTopologyProperties",
  type: {
    name: "Composite",
    className: "MediaGraphTopologyProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MediaGraphParameterDeclaration"
            }
          }
        }
      },
      sources: {
        serializedName: "sources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MediaGraphSource"
            }
          }
        }
      },
      processors: {
        serializedName: "processors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MediaGraphProcessor"
            }
          }
        }
      },
      sinks: {
        serializedName: "sinks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MediaGraphSink"
            }
          }
        }
      }
    }
  }
};

export const MediaGraphTopology: msRest.CompositeMapper = {
  serializedName: "MediaGraphTopology",
  type: {
    name: "Composite",
    className: "MediaGraphTopology",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      apiVersion: {
        serializedName: "@apiVersion",
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "MediaGraphSystemData"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MediaGraphTopologyProperties"
        }
      }
    }
  }
};

export const MediaGraphTopologyCollection: msRest.CompositeMapper = {
  serializedName: "MediaGraphTopologyCollection",
  type: {
    name: "Composite",
    className: "MediaGraphTopologyCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MediaGraphTopology"
            }
          }
        }
      },
      continuationToken: {
        serializedName: "@continuationToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphCredentials: msRest.CompositeMapper = {
  serializedName: "MediaGraphCredentials",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "type"
    },
    uberParent: "MediaGraphCredentials",
    className: "MediaGraphCredentials",
    modelProperties: {
      type: {
        required: true,
        serializedName: "@type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphEndpoint: msRest.CompositeMapper = {
  serializedName: "MediaGraphEndpoint",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "type"
    },
    uberParent: "MediaGraphEndpoint",
    className: "MediaGraphEndpoint",
    modelProperties: {
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "MediaGraphCredentials"
        }
      },
      url: {
        required: true,
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "@type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphRtspSource: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.MediaGraphRtspSource",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MediaGraphSource.type.polymorphicDiscriminator,
    uberParent: "MediaGraphSource",
    className: "MediaGraphRtspSource",
    modelProperties: {
      ...MediaGraphSource.type.modelProperties,
      transport: {
        serializedName: "transport",
        type: {
          name: "String"
        }
      },
      endpoint: {
        required: true,
        serializedName: "endpoint",
        type: {
          name: "Composite",
          className: "MediaGraphEndpoint"
        }
      }
    }
  }
};

export const MediaGraphIoTHubMessageSource: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.MediaGraphIoTHubMessageSource",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MediaGraphSource.type.polymorphicDiscriminator,
    uberParent: "MediaGraphSource",
    className: "MediaGraphIoTHubMessageSource",
    modelProperties: {
      ...MediaGraphSource.type.modelProperties,
      hubInputName: {
        serializedName: "hubInputName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphIoTHubMessageSink: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.MediaGraphIoTHubMessageSink",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MediaGraphSink.type.polymorphicDiscriminator,
    uberParent: "MediaGraphSink",
    className: "MediaGraphIoTHubMessageSink",
    modelProperties: {
      ...MediaGraphSink.type.modelProperties,
      hubOutputName: {
        serializedName: "hubOutputName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphUsernamePasswordCredentials: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.MediaGraphUsernamePasswordCredentials",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MediaGraphCredentials.type.polymorphicDiscriminator,
    uberParent: "MediaGraphCredentials",
    className: "MediaGraphUsernamePasswordCredentials",
    modelProperties: {
      ...MediaGraphCredentials.type.modelProperties,
      username: {
        required: true,
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphHttpHeaderCredentials: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.MediaGraphHttpHeaderCredentials",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MediaGraphCredentials.type.polymorphicDiscriminator,
    uberParent: "MediaGraphCredentials",
    className: "MediaGraphHttpHeaderCredentials",
    modelProperties: {
      ...MediaGraphCredentials.type.modelProperties,
      headerName: {
        required: true,
        serializedName: "headerName",
        type: {
          name: "String"
        }
      },
      headerValue: {
        required: true,
        serializedName: "headerValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphUnsecuredEndpoint: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.MediaGraphUnsecuredEndpoint",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MediaGraphEndpoint.type.polymorphicDiscriminator,
    uberParent: "MediaGraphEndpoint",
    className: "MediaGraphUnsecuredEndpoint",
    modelProperties: {
      ...MediaGraphEndpoint.type.modelProperties
    }
  }
};

export const MediaGraphCertificateSource: msRest.CompositeMapper = {
  serializedName: "MediaGraphCertificateSource",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "type"
    },
    uberParent: "MediaGraphCertificateSource",
    className: "MediaGraphCertificateSource",
    modelProperties: {
      type: {
        required: true,
        serializedName: "@type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphTlsValidationOptions: msRest.CompositeMapper = {
  serializedName: "MediaGraphTlsValidationOptions",
  type: {
    name: "Composite",
    className: "MediaGraphTlsValidationOptions",
    modelProperties: {
      ignoreHostname: {
        serializedName: "ignoreHostname",
        type: {
          name: "String"
        }
      },
      ignoreSignature: {
        serializedName: "ignoreSignature",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphTlsEndpoint: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.MediaGraphTlsEndpoint",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MediaGraphEndpoint.type.polymorphicDiscriminator,
    uberParent: "MediaGraphEndpoint",
    className: "MediaGraphTlsEndpoint",
    modelProperties: {
      ...MediaGraphEndpoint.type.modelProperties,
      trustedCertificates: {
        serializedName: "trustedCertificates",
        type: {
          name: "Composite",
          className: "MediaGraphCertificateSource"
        }
      },
      validationOptions: {
        serializedName: "validationOptions",
        type: {
          name: "Composite",
          className: "MediaGraphTlsValidationOptions"
        }
      }
    }
  }
};

export const MediaGraphPemCertificateList: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.MediaGraphPemCertificateList",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MediaGraphCertificateSource.type.polymorphicDiscriminator,
    uberParent: "MediaGraphCertificateSource",
    className: "MediaGraphPemCertificateList",
    modelProperties: {
      ...MediaGraphCertificateSource.type.modelProperties,
      certificates: {
        required: true,
        serializedName: "certificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const MediaGraphFileSink: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.MediaGraphFileSink",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MediaGraphSink.type.polymorphicDiscriminator,
    uberParent: "MediaGraphSink",
    className: "MediaGraphFileSink",
    modelProperties: {
      ...MediaGraphSink.type.modelProperties,
      filePathPattern: {
        required: true,
        serializedName: "filePathPattern",
        constraints: {
          MinLength: 1
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphAssetSink: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.MediaGraphAssetSink",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MediaGraphSink.type.polymorphicDiscriminator,
    uberParent: "MediaGraphSink",
    className: "MediaGraphAssetSink",
    modelProperties: {
      ...MediaGraphSink.type.modelProperties,
      assetNamePattern: {
        serializedName: "assetNamePattern",
        type: {
          name: "String"
        }
      },
      segmentLength: {
        serializedName: "segmentLength",
        type: {
          name: "TimeSpan"
        }
      },
      localMediaCachePath: {
        serializedName: "localMediaCachePath",
        type: {
          name: "String"
        }
      },
      localMediaCacheMaximumSizeMiB: {
        serializedName: "localMediaCacheMaximumSizeMiB",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphMotionDetectionProcessor: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.MediaGraphMotionDetectionProcessor",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MediaGraphProcessor.type.polymorphicDiscriminator,
    uberParent: "MediaGraphProcessor",
    className: "MediaGraphMotionDetectionProcessor",
    modelProperties: {
      ...MediaGraphProcessor.type.modelProperties,
      sensitivity: {
        serializedName: "sensitivity",
        type: {
          name: "String"
        }
      },
      outputMotionRegion: {
        serializedName: "outputMotionRegion",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MediaGraphImageScale: msRest.CompositeMapper = {
  serializedName: "MediaGraphImageScale",
  type: {
    name: "Composite",
    className: "MediaGraphImageScale",
    modelProperties: {
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      width: {
        serializedName: "width",
        type: {
          name: "String"
        }
      },
      height: {
        serializedName: "height",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphImageFormat: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.MediaGraphImageFormat",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "type"
    },
    uberParent: "MediaGraphImageFormat",
    className: "MediaGraphImageFormat",
    modelProperties: {
      type: {
        required: true,
        serializedName: "@type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphImage: msRest.CompositeMapper = {
  serializedName: "MediaGraphImage",
  type: {
    name: "Composite",
    className: "MediaGraphImage",
    modelProperties: {
      scale: {
        serializedName: "scale",
        type: {
          name: "Composite",
          className: "MediaGraphImageScale"
        }
      },
      format: {
        serializedName: "format",
        type: {
          name: "Composite",
          className: "MediaGraphImageFormat"
        }
      }
    }
  }
};

export const MediaGraphExtensionProcessorBase: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.MediaGraphExtensionProcessorBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MediaGraphProcessor.type.polymorphicDiscriminator,
    uberParent: "MediaGraphProcessor",
    className: "MediaGraphExtensionProcessorBase",
    modelProperties: {
      ...MediaGraphProcessor.type.modelProperties,
      endpoint: {
        serializedName: "endpoint",
        type: {
          name: "Composite",
          className: "MediaGraphEndpoint"
        }
      },
      image: {
        serializedName: "image",
        type: {
          name: "Composite",
          className: "MediaGraphImage"
        }
      }
    }
  }
};

export const MediaGraphHttpExtension: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.MediaGraphHttpExtension",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MediaGraphProcessor.type.polymorphicDiscriminator,
    uberParent: "MediaGraphProcessor",
    className: "MediaGraphHttpExtension",
    modelProperties: {
      ...MediaGraphExtensionProcessorBase.type.modelProperties
    }
  }
};

export const MediaGraphImageFormatRaw: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.MediaGraphImageFormatRaw",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MediaGraphImageFormat.type.polymorphicDiscriminator,
    uberParent: "MediaGraphImageFormat",
    className: "MediaGraphImageFormatRaw",
    modelProperties: {
      ...MediaGraphImageFormat.type.modelProperties,
      pixelFormat: {
        serializedName: "pixelFormat",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphImageFormatEncoded: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.MediaGraphImageFormatEncoded",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MediaGraphImageFormat.type.polymorphicDiscriminator,
    uberParent: "MediaGraphImageFormat",
    className: "MediaGraphImageFormatEncoded",
    modelProperties: {
      ...MediaGraphImageFormat.type.modelProperties,
      encoding: {
        serializedName: "encoding",
        defaultValue: 'Jpeg',
        type: {
          name: "String"
        }
      },
      quality: {
        serializedName: "quality",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphSignalGateProcessor: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.MediaGraphSignalGateProcessor",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MediaGraphProcessor.type.polymorphicDiscriminator,
    uberParent: "MediaGraphProcessor",
    className: "MediaGraphSignalGateProcessor",
    modelProperties: {
      ...MediaGraphProcessor.type.modelProperties,
      activationEvaluationWindow: {
        serializedName: "activationEvaluationWindow",
        type: {
          name: "String"
        }
      },
      activationSignalOffset: {
        serializedName: "activationSignalOffset",
        type: {
          name: "String"
        }
      },
      minimumActivationTime: {
        serializedName: "minimumActivationTime",
        type: {
          name: "String"
        }
      },
      maximumActivationTime: {
        serializedName: "maximumActivationTime",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaGraphFrameRateFilterProcessor: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.MediaGraphFrameRateFilterProcessor",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MediaGraphProcessor.type.polymorphicDiscriminator,
    uberParent: "MediaGraphProcessor",
    className: "MediaGraphFrameRateFilterProcessor",
    modelProperties: {
      ...MediaGraphProcessor.type.modelProperties,
      maximumFps: {
        serializedName: "maximumFps",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const discriminators = {
  'MediaGraphSource' : MediaGraphSource,
  'MediaGraphProcessor' : MediaGraphProcessor,
  'MediaGraphSink' : MediaGraphSink,
  'MediaGraphCredentials' : MediaGraphCredentials,
  'MediaGraphEndpoint' : MediaGraphEndpoint,
  'MediaGraphSource.#Microsoft.Media.MediaGraphRtspSource' : MediaGraphRtspSource,
  'MediaGraphSource.#Microsoft.Media.MediaGraphIoTHubMessageSource' : MediaGraphIoTHubMessageSource,
  'MediaGraphSink.#Microsoft.Media.MediaGraphIoTHubMessageSink' : MediaGraphIoTHubMessageSink,
  'MediaGraphCredentials.#Microsoft.Media.MediaGraphUsernamePasswordCredentials' : MediaGraphUsernamePasswordCredentials,
  'MediaGraphCredentials.#Microsoft.Media.MediaGraphHttpHeaderCredentials' : MediaGraphHttpHeaderCredentials,
  'MediaGraphEndpoint.#Microsoft.Media.MediaGraphUnsecuredEndpoint' : MediaGraphUnsecuredEndpoint,
  'MediaGraphCertificateSource' : MediaGraphCertificateSource,
  'MediaGraphEndpoint.#Microsoft.Media.MediaGraphTlsEndpoint' : MediaGraphTlsEndpoint,
  'MediaGraphCertificateSource.#Microsoft.Media.MediaGraphPemCertificateList' : MediaGraphPemCertificateList,
  'MediaGraphSink.#Microsoft.Media.MediaGraphFileSink' : MediaGraphFileSink,
  'MediaGraphSink.#Microsoft.Media.MediaGraphAssetSink' : MediaGraphAssetSink,
  'MediaGraphProcessor.#Microsoft.Media.MediaGraphMotionDetectionProcessor' : MediaGraphMotionDetectionProcessor,
  '#Microsoft.Media.MediaGraphImageFormat' : MediaGraphImageFormat,
  'MediaGraphProcessor.#Microsoft.Media.MediaGraphExtensionProcessorBase' : MediaGraphExtensionProcessorBase,
  'MediaGraphProcessor.#Microsoft.Media.MediaGraphHttpExtension' : MediaGraphHttpExtension,
  'MediaGraphImageFormat.#Microsoft.Media.MediaGraphImageFormatRaw' : MediaGraphImageFormatRaw,
  'MediaGraphImageFormat.#Microsoft.Media.MediaGraphImageFormatEncoded' : MediaGraphImageFormatEncoded,
  'MediaGraphProcessor.#Microsoft.Media.MediaGraphSignalGateProcessor' : MediaGraphSignalGateProcessor,
  'MediaGraphProcessor.#Microsoft.Media.MediaGraphFrameRateFilterProcessor' : MediaGraphFrameRateFilterProcessor

};
