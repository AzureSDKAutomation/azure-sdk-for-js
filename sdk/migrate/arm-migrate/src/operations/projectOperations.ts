/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/projectOperationsMappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateV2Context } from "../azureMigrateV2Context";

/** Class representing a ProjectOperations. */
export class ProjectOperations {
  private readonly client: AzureMigrateV2Context;

  /**
   * Create a ProjectOperations.
   * @param {AzureMigrateV2Context} client Reference to the service client.
   */
  constructor(client: AzureMigrateV2Context) {
    this.client = client;
  }

  /**
   * Get all available options for the properties of an assessment on a project.
   * @summary Get all available options for the properties of an assessment on a project.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param assessmentOptionsName Name of the assessment options. The only name accepted in default.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProjectAssessmentOptionsResponse>
   */
  assessmentOptionsMethod(resourceGroupName: string, projectName: string, assessmentOptionsName: string, options?: msRest.RequestOptionsBase): Promise<Models.ProjectAssessmentOptionsResponse>;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param assessmentOptionsName Name of the assessment options. The only name accepted in default.
   * @param callback The callback
   */
  assessmentOptionsMethod(resourceGroupName: string, projectName: string, assessmentOptionsName: string, callback: msRest.ServiceCallback<Models.AssessmentOptions>): void;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param assessmentOptionsName Name of the assessment options. The only name accepted in default.
   * @param options The optional parameters
   * @param callback The callback
   */
  assessmentOptionsMethod(resourceGroupName: string, projectName: string, assessmentOptionsName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AssessmentOptions>): void;
  assessmentOptionsMethod(resourceGroupName: string, projectName: string, assessmentOptionsName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AssessmentOptions>, callback?: msRest.ServiceCallback<Models.AssessmentOptions>): Promise<Models.ProjectAssessmentOptionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        assessmentOptionsName,
        options
      },
      assessmentOptionsMethodOperationSpec,
      callback) as Promise<Models.ProjectAssessmentOptionsResponse>;
  }

  /**
   * Gets list of all available options for the properties of an assessment on a project.
   * @summary Gets list of all available options for the properties of an assessment on a project.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProjectAssessmentOptionsListResponse>
   */
  assessmentOptionsList(resourceGroupName: string, projectName: string, options?: msRest.RequestOptionsBase): Promise<Models.ProjectAssessmentOptionsListResponse>;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param callback The callback
   */
  assessmentOptionsList(resourceGroupName: string, projectName: string, callback: msRest.ServiceCallback<Models.AssessmentOptionsResultList>): void;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param options The optional parameters
   * @param callback The callback
   */
  assessmentOptionsList(resourceGroupName: string, projectName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AssessmentOptionsResultList>): void;
  assessmentOptionsList(resourceGroupName: string, projectName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AssessmentOptionsResultList>, callback?: msRest.ServiceCallback<Models.AssessmentOptionsResultList>): Promise<Models.ProjectAssessmentOptionsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        options
      },
      assessmentOptionsListOperationSpec,
      callback) as Promise<Models.ProjectAssessmentOptionsListResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const assessmentOptionsMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessmentOptions/{assessmentOptionsName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.assessmentOptionsName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AssessmentOptions,
      headersMapper: Mappers.ProjectAssessmentOptionsHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.ProjectAssessmentOptionsHeaders
    }
  },
  serializer
};

const assessmentOptionsListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessmentOptions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AssessmentOptionsResultList,
      headersMapper: Mappers.ProjectAssessmentOptionsListHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.ProjectAssessmentOptionsListHeaders
    }
  },
  serializer
};
