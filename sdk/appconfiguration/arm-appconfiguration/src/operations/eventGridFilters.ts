/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/eventGridFiltersMappers";
import * as Parameters from "../models/parameters";
import { AppConfigurationManagementClientContext } from "../appConfigurationManagementClientContext";

/** Class representing a EventGridFilters. */
export class EventGridFilters {
  private readonly client: AppConfigurationManagementClientContext;

  /**
   * Create a EventGridFilters.
   * @param {AppConfigurationManagementClientContext} client Reference to the service client.
   */
  constructor(client: AppConfigurationManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists the event grid filters for a given configuration store.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param configStoreName The name of the configuration store.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventGridFiltersListByConfigurationStoreResponse>
   */
  listByConfigurationStore(resourceGroupName: string, configStoreName: string, options?: Models.EventGridFiltersListByConfigurationStoreOptionalParams): Promise<Models.EventGridFiltersListByConfigurationStoreResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param configStoreName The name of the configuration store.
   * @param callback The callback
   */
  listByConfigurationStore(resourceGroupName: string, configStoreName: string, callback: msRest.ServiceCallback<Models.EventGridFilterListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param configStoreName The name of the configuration store.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByConfigurationStore(resourceGroupName: string, configStoreName: string, options: Models.EventGridFiltersListByConfigurationStoreOptionalParams, callback: msRest.ServiceCallback<Models.EventGridFilterListResult>): void;
  listByConfigurationStore(resourceGroupName: string, configStoreName: string, options?: Models.EventGridFiltersListByConfigurationStoreOptionalParams | msRest.ServiceCallback<Models.EventGridFilterListResult>, callback?: msRest.ServiceCallback<Models.EventGridFilterListResult>): Promise<Models.EventGridFiltersListByConfigurationStoreResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        configStoreName,
        options
      },
      listByConfigurationStoreOperationSpec,
      callback) as Promise<Models.EventGridFiltersListByConfigurationStoreResponse>;
  }

  /**
   * Gets the properties of the specified event grid filter.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param configStoreName The name of the configuration store.
   * @param eventGridFilterName The name of the event grid filter to retrieve.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventGridFiltersGetResponse>
   */
  get(resourceGroupName: string, configStoreName: string, eventGridFilterName: string, options?: msRest.RequestOptionsBase): Promise<Models.EventGridFiltersGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param configStoreName The name of the configuration store.
   * @param eventGridFilterName The name of the event grid filter to retrieve.
   * @param callback The callback
   */
  get(resourceGroupName: string, configStoreName: string, eventGridFilterName: string, callback: msRest.ServiceCallback<Models.EventGridFilter>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param configStoreName The name of the configuration store.
   * @param eventGridFilterName The name of the event grid filter to retrieve.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, configStoreName: string, eventGridFilterName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EventGridFilter>): void;
  get(resourceGroupName: string, configStoreName: string, eventGridFilterName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventGridFilter>, callback?: msRest.ServiceCallback<Models.EventGridFilter>): Promise<Models.EventGridFiltersGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        configStoreName,
        eventGridFilterName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.EventGridFiltersGetResponse>;
  }

  /**
   * Lists the event grid filters for a given configuration store.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventGridFiltersListByConfigurationStoreNextResponse>
   */
  listByConfigurationStoreNext(nextPageLink: string, options?: Models.EventGridFiltersListByConfigurationStoreNextOptionalParams): Promise<Models.EventGridFiltersListByConfigurationStoreNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByConfigurationStoreNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EventGridFilterListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByConfigurationStoreNext(nextPageLink: string, options: Models.EventGridFiltersListByConfigurationStoreNextOptionalParams, callback: msRest.ServiceCallback<Models.EventGridFilterListResult>): void;
  listByConfigurationStoreNext(nextPageLink: string, options?: Models.EventGridFiltersListByConfigurationStoreNextOptionalParams | msRest.ServiceCallback<Models.EventGridFilterListResult>, callback?: msRest.ServiceCallback<Models.EventGridFilterListResult>): Promise<Models.EventGridFiltersListByConfigurationStoreNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByConfigurationStoreNextOperationSpec,
      callback) as Promise<Models.EventGridFiltersListByConfigurationStoreNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByConfigurationStoreOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/eventGridFilters",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.configStoreName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventGridFilterListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/eventGridFilters/{eventGridFilterName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.configStoreName,
    Parameters.eventGridFilterName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventGridFilter
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByConfigurationStoreNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventGridFilterListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
