/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/dpsCertificateAuthorityMappers";
import * as Parameters from "../models/parameters";
import { IotDpsClientContext } from "../iotDpsClientContext";

/** Class representing a DpsCertificateAuthority. */
export class DpsCertificateAuthority {
  private readonly client: IotDpsClientContext;

  /**
   * Create a DpsCertificateAuthority.
   * @param {IotDpsClientContext} client Reference to the service client.
   */
  constructor(client: IotDpsClientContext) {
    this.client = client;
  }

  /**
   * Get the certificate from the provisioning service.
   * @param certificateName Name of the certificate to retrieve.
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName Name of the provisioning service the certificate is associated
   * with.
   * @param [options] The optional parameters
   * @returns Promise<Models.DpsCertificateAuthorityGetResponse>
   */
  get(certificateName: string, resourceGroupName: string, provisioningServiceName: string, options?: Models.DpsCertificateAuthorityGetOptionalParams): Promise<Models.DpsCertificateAuthorityGetResponse>;
  /**
   * @param certificateName Name of the certificate to retrieve.
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName Name of the provisioning service the certificate is associated
   * with.
   * @param callback The callback
   */
  get(certificateName: string, resourceGroupName: string, provisioningServiceName: string, callback: msRest.ServiceCallback<Models.CertificateResponse>): void;
  /**
   * @param certificateName Name of the certificate to retrieve.
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName Name of the provisioning service the certificate is associated
   * with.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(certificateName: string, resourceGroupName: string, provisioningServiceName: string, options: Models.DpsCertificateAuthorityGetOptionalParams, callback: msRest.ServiceCallback<Models.CertificateResponse>): void;
  get(certificateName: string, resourceGroupName: string, provisioningServiceName: string, options?: Models.DpsCertificateAuthorityGetOptionalParams | msRest.ServiceCallback<Models.CertificateResponse>, callback?: msRest.ServiceCallback<Models.CertificateResponse>): Promise<Models.DpsCertificateAuthorityGetResponse> {
    return this.client.sendOperationRequest(
      {
        certificateName,
        resourceGroupName,
        provisioningServiceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DpsCertificateAuthorityGetResponse>;
  }

  /**
   * Add new certificate or update an existing certificate.
   * @summary Upload the certificate to the provisioning service.
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName The name of the provisioning service.
   * @param certificateName The name of the certificate create or update.
   * @param certificateDescription The certificate body.
   * @param [options] The optional parameters
   * @returns Promise<Models.DpsCertificateAuthorityCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, provisioningServiceName: string, certificateName: string, certificateDescription: Models.CertificateBodyDescription, options?: Models.DpsCertificateAuthorityCreateOrUpdateOptionalParams): Promise<Models.DpsCertificateAuthorityCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName The name of the provisioning service.
   * @param certificateName The name of the certificate create or update.
   * @param certificateDescription The certificate body.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, provisioningServiceName: string, certificateName: string, certificateDescription: Models.CertificateBodyDescription, callback: msRest.ServiceCallback<Models.CertificateResponse>): void;
  /**
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName The name of the provisioning service.
   * @param certificateName The name of the certificate create or update.
   * @param certificateDescription The certificate body.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, provisioningServiceName: string, certificateName: string, certificateDescription: Models.CertificateBodyDescription, options: Models.DpsCertificateAuthorityCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.CertificateResponse>): void;
  createOrUpdate(resourceGroupName: string, provisioningServiceName: string, certificateName: string, certificateDescription: Models.CertificateBodyDescription, options?: Models.DpsCertificateAuthorityCreateOrUpdateOptionalParams | msRest.ServiceCallback<Models.CertificateResponse>, callback?: msRest.ServiceCallback<Models.CertificateResponse>): Promise<Models.DpsCertificateAuthorityCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        provisioningServiceName,
        certificateName,
        certificateDescription,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.DpsCertificateAuthorityCreateOrUpdateResponse>;
  }

  /**
   * Deletes the specified certificate associated with the Provisioning Service
   * @summary Delete the Provisioning Service Certificate.
   * @param resourceGroupName Resource group identifier.
   * @param ifMatch ETag of the certificate
   * @param provisioningServiceName The name of the provisioning service.
   * @param certificateName This is a mandatory field, and is the logical name of the certificate
   * that the provisioning service will access by.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, ifMatch: string, provisioningServiceName: string, certificateName: string, options?: Models.DpsCertificateAuthorityDeleteMethodOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Resource group identifier.
   * @param ifMatch ETag of the certificate
   * @param provisioningServiceName The name of the provisioning service.
   * @param certificateName This is a mandatory field, and is the logical name of the certificate
   * that the provisioning service will access by.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, ifMatch: string, provisioningServiceName: string, certificateName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Resource group identifier.
   * @param ifMatch ETag of the certificate
   * @param provisioningServiceName The name of the provisioning service.
   * @param certificateName This is a mandatory field, and is the logical name of the certificate
   * that the provisioning service will access by.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, ifMatch: string, provisioningServiceName: string, certificateName: string, options: Models.DpsCertificateAuthorityDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, ifMatch: string, provisioningServiceName: string, certificateName: string, options?: Models.DpsCertificateAuthorityDeleteMethodOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        ifMatch,
        provisioningServiceName,
        certificateName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Get all the certificates tied to the provisioning service.
   * @param resourceGroupName Name of resource group.
   * @param provisioningServiceName Name of provisioning service to retrieve certificates for.
   * @param [options] The optional parameters
   * @returns Promise<Models.DpsCertificateAuthorityListResponse>
   */
  list(resourceGroupName: string, provisioningServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.DpsCertificateAuthorityListResponse>;
  /**
   * @param resourceGroupName Name of resource group.
   * @param provisioningServiceName Name of provisioning service to retrieve certificates for.
   * @param callback The callback
   */
  list(resourceGroupName: string, provisioningServiceName: string, callback: msRest.ServiceCallback<Models.CertificateListDescription>): void;
  /**
   * @param resourceGroupName Name of resource group.
   * @param provisioningServiceName Name of provisioning service to retrieve certificates for.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, provisioningServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateListDescription>): void;
  list(resourceGroupName: string, provisioningServiceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateListDescription>, callback?: msRest.ServiceCallback<Models.CertificateListDescription>): Promise<Models.DpsCertificateAuthorityListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        provisioningServiceName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.DpsCertificateAuthorityListResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificateAuthorities/{certificateName}",
  urlParameters: [
    Parameters.certificateName0,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch0,
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateResponse
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificateAuthorities/{certificateName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName,
    Parameters.certificateName1
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch0,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "certificateDescription",
    mapper: {
      ...Mappers.CertificateBodyDescription,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CertificateResponse
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificateAuthorities/{certificateName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName,
    Parameters.certificateName0
  ],
  queryParameters: [
    Parameters.certificatename,
    Parameters.certificaterawBytes,
    Parameters.certificateisVerified,
    Parameters.certificatepurpose,
    Parameters.certificatecreated,
    Parameters.certificatelastUpdated,
    Parameters.certificatehasPrivateKey,
    Parameters.certificatenonce,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch1,
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificateAuthorities",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListDescription
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};
