/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/operationResultsMappers";
import * as Parameters from "../models/parameters";
import { AzureReservationAPIContext } from "../azureReservationAPIContext";

/** Class representing a OperationResults. */
export class OperationResults {
  private readonly client: AzureReservationAPIContext;

  /**
   * Create a OperationResults.
   * @param {AzureReservationAPIContext} client Reference to the service client.
   */
  constructor(client: AzureReservationAPIContext) {
    this.client = client;
  }

  /**
   * Get operationResult.
   * @summary Get OperationResult
   * @param operationResultId OperationResult identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.OperationResultsGetResponse>
   */
  get(operationResultId: string, options?: msRest.RequestOptionsBase): Promise<Models.OperationResultsGetResponse> {
    return this.beginGet(operationResultId,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.OperationResultsGetResponse>;
  }

  /**
   * Get operationResult.
   * @summary Get OperationResult
   * @param operationResultId OperationResult identifier
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginGet(operationResultId: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        operationResultId,
        options
      },
      beginGetOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const beginGetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Capacity/operationResults/{operationResultId}",
  urlParameters: [
    Parameters.operationResultId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      },
      headersMapper: Mappers.OperationResultsGetHeaders
    },
    202: {
      headersMapper: Mappers.OperationResultsGetHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel,
      headersMapper: Mappers.OperationResultsGetHeaders
    }
  },
  serializer
};
